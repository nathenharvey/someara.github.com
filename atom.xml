<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[A Fistful of Servers]]></title>
  <link href="http://someara.github.com/atom.xml" rel="self"/>
  <link href="http://someara.github.com/"/>
  <updated>2013-01-01T18:37:08-05:00</updated>
  <id>http://someara.github.com/</id>
  <author>
    <name><![CDATA[Sean OMeara]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Promises, Lies, and Dry-Run Mode]]></title>
    <link href="http://someara.github.com/post/2012/12/21/promises-lies-and-dryrun-mode/"/>
    <updated>2012-12-21T04:20:00-05:00</updated>
    <id>http://someara.github.com/post/2012/12/21/promises-lies-and-dryrun-mode</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>


<p><img class="right" src="http://i.imgur.com/Ftyot.jpg" width="300"></p>

<p>&#8220;I need to know what this will do to my production systems before I run
it.&#8221; &#8211; Ask a Systems Administrator why they want dry-run mode in a
management tool, and this is the answer you&#8217;ll get almost every single
time.</p>

<p>Historically, we have been able to use dry-run as a risk mitigation
strategy before applying changes to machines. Dry-run is supposed to
report what a tool would do, so that the administrator can determine
if it is safe to run. Unfortunately, this only works if the reporting
can be trusted as accurate.</p>

<p>In this post, I&#8217;ll show why modern configuration management tools
behave differently than the classical tool set, and why their dry-run
reporting is untrustworthy. While useful for development, it should
never be used in place of proper testing.</p>

<h2> make -n </h2>


<p><img class="left" src="http://upload.wikimedia.org/wikipedia/commons/thumb/2/29/Ford_assembly_line_-_1913.jpg/566px-Ford_assembly_line_-_1913.jpg" width="300"></p>

<p>Many tools in a sysadmin&#8217;s belt have a dry-run mode. Common
utilities like make, rsync, rpm, and apt all have it.  Many databases
will let you simulate updates, and most disk utilities can show you
changes before making them.</p>

<p>The <a href=http://pubs.opengroup.org/onlinepubs/009695399/utilities/make.html">make</a>
utility is the earliest example I can find of an automation tool with
a dry-run option. Dry-run in <code>make -n</code> works by building a list of
commands, then printing instead of executing them. This is useful
because it can be trusted that <code>make</code> will always run the exact same
list in real-run mode. Rsync and others behave the same way.</p>

<p>Convergence based tools, however, don&#8217;t build lists of commands. They
build sets of convergent operators instead.</p>

<h2> Convergent Operators, Sets and Sequence </h2>


<p><img class="right" src="http://i.imgur.com/x3uWr.png" width="300"></p>

<p>Convergent operators ensure state. They have a subject, and two sets of
instructions. The first set are tests that determine if the subject is
in the desired state, and the second set takes corrective actions if
needed. Types are made by grouping common tests and actions. This
allows us to talk about things like users, groups, files, and services
abstractly.</p>

<p>CFEngine promise bundles, Puppet manifests, and Chef recipes are all
sets of these data structures. Putting them into a <a
href="http://en.wikipedia.org/wiki/Control_theory">feedback loop</a>
lets them cooperate over multiple runs, and enables the self-healing
behavior that is essential when dealing with large amounts of
complexity.</p>

<p><img class="left" src="http://i.imgur.com/g4fcW.png" width="300"></p>

<p>During each run, <em>ordered sets</em> of convergent operators are applied
against the system. How order is determined varies from tool to tool,
but it is ordered none the less.</p>

<h2> Promises and Lies </h2>


<p><img class="left" src="http://i.imgur.com/rUk4d.png" width="350">
CFEngine models <a href="http://en.wikipedia.org/wiki/Promise_theory">Promise Theory</a>
as a way of doing systems management. While Puppet and Chef do not model
promise theory explicitly, it is still useful to borrow its vocabulary
and metaphors and think about individual, autonomous agents that
promise to fix the things they&#8217;re concerned with.</p>

<p>When writing policy, imagine every resource statement as a simple
little robot. When the client runs, a swarm of these robots run
tests, interrogate package managers, inspect files, and examine
process tables. Corrective action is taken only when necessary.</p>

<p>When dealing with these agents, it can sometimes seem like they&#8217;re
lying to you. This raises a few questions. Why would they lie? Under
what circumstances are they likely to lie? What exactly is a lie
anyway?</p>

<p>A <a href="http://cfengine.com/markburgess/BookOfPromises.pdf">formal</a>
examination of promises does indeed include the notion of lies. Lies
can be outright deceptions, which are the lies of the
rarely-encountered Evil Robots. Lies can also be &#8220;non-deceptions&#8221;,
which are the lies of occasionally-encountered Broken Robots. Most
often though, we experience lies from the often-encountered Merely
Mis-informed Robots.</p>

<h2> The Best You Can Do </h2>


<p><img class="left" src="http://i.imgur.com/oyf5b.png" width="300"></p>

<p>The best you can possibly hope to do in a dry-run mode is to build the operator
sequences, then interrogate each one about what they would do to
repair the system at that exact moment. The problem with this is, in real-run
mode, the <em>the system is changing between the tests</em>. Quite often, the
results of any given test will be affected by a preceeding action.</p>

<p><img class="right" src="http://i.imgur.com/uKQHY.png" width="300"></p>

<p>Configuration operations can have rather large side effects. Sending
signals to processes can change files on disk. Mounting a disk will
change and entire branch of a directory tree. Packages can drop off
one or a million different files, and will often execute pre or
post-installation scripts. Installing the Postfix package on an Ubuntu
system will not only write the package contents to disk, but also
create users and disable Exim before automatically starting the service.</p>

<p>Throw in some notifications and boolean checks and things can get
really interesting.</p>

<h2> Experiments with Robots </h2>


<p><img class="right" src="http://i.imgur.com/4ORuB.jpg" width="250" height="350"></p>

<p>To experiment with dry-run mode, I wrote a Chef cookbook that
configures a machine with initial conditions, then drops off CFEngine
and Puppet policies for dry-running.</p>

<p>Three configuration management systems, each with conflicting
policies, wreaking havoc on a single machine sounds like a fun way to
spend the evening. Lets get weird.</p>

<p>If you already have a Ruby and Vagrant environment setup on your
workstation and would like to follow along, feel free. Otherwise, you
can just read the code examples by clicking on the provided links as
we go.</p>

<p>Clone out the <a href='https://github.com/someara/dry-run-lies-cookbook'>dry-run-lies</a>
cookbook from Github, then bring up a Vagrant box with Chef.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~/src/$ git clone https://github.com/someara/dry-run-lies-cookbook dry-run-lies
</span><span class='line'>~/src/$ cd dry-run-lies
</span><span class='line'>~/src/dry-run-lies$ bundle install
</span><span class='line'>~/src/dry-run-lies$ bundle exec vagrant up
</span><span class='line'>~/src/dry-run-lies$ bundle exec vagrant ssh</span></code></pre></td></tr></table></div></figure>




<h2> CFEngine &#8211;dry-run </h2>


<p>When Chef is done configuring the machine, log into it and switch to
root. We can test the <code>/tmp/lies-1.cf</code> policy file by running <code>cf-agent</code> with the <code>-n</code> flag.</p>

<figure class='code'><figcaption><span>CFEngine dry-run  </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@dry-run-lies:~# cf-agent -K -f /tmp/lies-1.cf -n
</span><span class='line'>-> Would execute script /bin/echo hello from bundle_one. puppet_bin_does_not_exist
</span><span class='line'> -> Need to execute /usr/bin/aptitude update...</span></code></pre></td></tr></table></div></figure>


<p>Dry-run mode reports that would run an echo command in bundle_one.
Let&#8217;s remove <code>-n</code> and see what happens.</p>

<figure class='code'><figcaption><span>CFEngine real-run  </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@dry-run-lies:~# cf-agent -K -f /tmp/lies-1.cf 
</span><span class='line'>Q: ".../bin/echo hello": hello from bundle_one.
</span><span class='line'>puppet_bin_does_not_exist
</span><span class='line'>I: Last 1 quoted lines were generated by promiser "/bin/echo hello from bundle_one. puppet_bin_does_not_exist"
</span><span class='line'>Q: ".../bin/echo hello": hello from bundle_three. puppet_bin_exists
</span><span class='line'>I: Last 1 quoted lines were generated by promiser "/bin/echo hello from bundle_three. puppet_bin_exists"</span></code></pre></td></tr></table></div></figure>


<p>Wait a sec&#8230; What&#8217;s all this bundle_three business? Did dry-run just
lie to me?</p>

<p>Examine the <code>lies-1.cf</code> file <a href="http://bit.ly/RVnV38">here</a>.</p>

<p>The policy said three things. First, &#8220;echo hello from bundle one if
/usr/bin/puppet does NOT exist&#8221;. Second, &#8220;make sure the puppet package
is installed&#8221;. Third, &#8220;echo hello from bundle three if /usr/bin/puppet
exists.&#8221;</p>

<p>In dry-run mode, each agent was interrogated individually. This resulted
in a report leading us to believe that only one &#8220;echo hello&#8221; would be
made, when in reality, there were two.</p>

<h2> Puppet &#8211;noop </h2>


<p>Let&#8217;s give Puppet a spin. We can test the policy at <code>/tmp/lies-1.pp</code> with the
<code>--noop</code> flag to see what Puppet thinks it will do.</p>

<figure class='code'><figcaption><span>Puppet dry-run  </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@dry-run-lies:~# puppet apply /tmp/lies-1.pp --noop
</span><span class='line'>notice: /Stage[main]//Mount[/mnt/nfsmount]/ensure: current_value ghost, should be unmounted (noop)
</span><span class='line'>notice: /Stage[main]//Mount[/mnt/nfsmount]: Would have triggered 'refresh' from 1 events
</span><span class='line'>notice: Class[Main]: Would have triggered 'refresh' from 3 events
</span><span class='line'>notice: Stage[main]: Would have triggered 'refresh' from 1 events
</span><span class='line'>notice: Finished catalog run in 0.30 seconds</span></code></pre></td></tr></table></div></figure>


<p>Dry-run reports that there is one resource to fix. Excellent. Let&#8217;s
remove the <code>--noop</code> flag and see what happens.</p>

<figure class='code'><figcaption><span>Puppet real-run </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@dry-run-lies:~# puppet apply /tmp/lies-1.pp
</span><span class='line'>notice: /Stage[main]//Mount[/mnt/nfsmount]/ensure: ensure changed 'ghost' to 'unmounted'
</span><span class='line'>notice: /Stage[main]//Mount[/mnt/nfsmount]: Triggered 'refresh' from 1 events
</span><span class='line'>notice: /Stage[main]//File[/mnt/nfsmount/file-1]/ensure: created
</span><span class='line'>notice: /Stage[main]//File[/mnt/nfsmount/file-2]/ensure: created
</span><span class='line'>notice: /Stage[main]//File[/mnt/nfsmount/file-3]/ensure: created
</span><span class='line'>notice: Finished catalog run in 4.37 seconds</span></code></pre></td></tr></table></div></figure>


<p>Like the CFEngine example, we have the real-run doing things that were
not listed in the dry-run report.</p>

<p>The Chef policy that set up the initial machine state mounted an NFS
directory into <code>/mnt/nfssrv</code>. When interrogated during dry-run, the
tests in the <code>file</code> resources saw that the files were present, so they
did not report that they needed to fix anything. During the real-run,
Puppet unmounts the directory changing the view  of the filesystem and
the outcome of the tests.</p>

<p>Check out the policy <a href="http://bit.ly/V87wom">here</a>.</p>

<p>It should be noted that Puppet&#8217;s resource graph model does nothing to
enable noop functionality, nor can it affect its accuracy. It used
only for the purposes of ordering and ensuring non-conflicting node
names within its model.</p>

<h2> Chef &#8211;why-run </h2>


<p>Finally, we&#8217;ll run the original Chef policy with the <code>-W</code> flag to see if it lies like the others.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@dry-run-lies:~# chef-solo -c /tmp/vagrant-chef-1/solo.rb -j /tmp/vagrant-chef-1/dna.json -Fmin --why-run
</span><span class='line'>Starting Chef Client, version 10.16.4
</span><span class='line'>Compiling cookbooks .......done.
</span><span class='line'>Converging 32 resources .........................U.......UUUS
</span><span class='line'>System converged.
</span><span class='line'>
</span><span class='line'>resources updated this run:
</span><span class='line'>* mount[/mnt/nfsmount]
</span><span class='line'>- mount 127.0.0.1:/srv/nfssrv to /mnt/nfsmount
</span><span class='line'>
</span><span class='line'>* package[nmap]
</span><span class='line'>- install version 5.21-1.1ubuntu1 of package nmap
</span><span class='line'>
</span><span class='line'>* package[puppet]
</span><span class='line'>- remove  package puppet
</span><span class='line'>- purge  package puppet
</span><span class='line'>
</span><span class='line'>* package[puppet-common]
</span><span class='line'>- remove  package puppet-common
</span><span class='line'>- purge  package puppet-common
</span><span class='line'>
</span><span class='line'>chef client finished, 4 resources updated</span></code></pre></td></tr></table></div></figure>


<p>Seems legit. Let&#8217;s remove the <code>--why-run</code> flag and do it for real.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@dry-run-lies:~# chef-solo -c /tmp/vagrant-chef-1/solo.rb -j /tmp/vagrant-chef-1/dna.json -Fmin 
</span><span class='line'>Starting Chef Client, version 10.16.4
</span><span class='line'>Compiling cookbooks .......done.
</span><span class='line'>Converging 32 resources .........................U.......UUUU
</span><span class='line'>System converged.
</span><span class='line'>
</span><span class='line'>resources updated this run:
</span><span class='line'>* mount[/mnt/nfsmount]
</span><span class='line'>- mount 127.0.0.1:/srv/nfssrv to /mnt/nfsmount
</span><span class='line'>
</span><span class='line'>* package[nmap]
</span><span class='line'>- install version 5.21-1.1ubuntu1 of package nmap
</span><span class='line'>
</span><span class='line'>* package[puppet]
</span><span class='line'>- remove  package puppet
</span><span class='line'>
</span><span class='line'>* package[puppet-common]
</span><span class='line'>- remove  package puppet-common
</span><span class='line'>
</span><span class='line'>* execute[hack the planet]
</span><span class='line'>- execute /bin/echo HACKING THE PLANET
</span><span class='line'>
</span><span class='line'>chef client finished, 5 resources updated</span></code></pre></td></tr></table></div></figure>


<p>Right. &#8220;HACKING THE PLANET&#8221; was definitely not in the dry-run output.
Let&#8217;s go figure out what happened. See the Chef policy <a href="http://bit.ly/WXr8k0">here</a>.</p>

<p>Previously, our CFEngine policy had installed Puppet on the machine.
Our Puppet policy ensured nmap was absent. Chef will install nmap, but
only if the Puppet binary is present in /usr/bin.</p>

<p>Running Chef in <code>--why-run</code> mode, the test for the <code>'package[nmap]'</code> resource
succeeds because of the pre-conditions set up by the CFEngine policy.
Had we not applied that policy, the <code>'execute[hack the planet]'</code>
resource would still not have fired because nothing had installed the
nmap package along the way. In real-run mode, it succeeds because Chef
changes the machine state between tests, but would have failed if we
had never ran the Puppet policy.</p>

<p>Yikes.</p>

<h2> Okay, So What? </h2>


<p>The robots were not trying to be deceptive. Each autonomous agent
told us what it honestly thought it should do in order to fix the
system. As far as they could see, everything was fine when we asked
them.</p>

<p>As we automate the world around us, it is important to know how the
systems we build fail. We are going to need to fix them, after all.
It is even more important to know how our machines lie to us. The last
thing we need is an army of lying robots wandering around.</p>

<p>Luckily, there are a number of techniques for testing and introducing
change that can be used to help ensure nothing bad happens.</p>

<h2> Keeping the Machines Honest </h2>


<p><img class="right" src="http://farm8.staticflickr.com/7171/6809694353_7bdba3a38a_n.jpg" width="280"></p>

<p>Testing needs to be about observation, not interrogation. In each
case, the system converged to the policy, regardless of whether
dry-run got confused or not. If we can setup up a test machine that
reproduce a system&#8217;s state, we can real-run the policy and observe the
behavior. Integration tests can then be written to ensure that the
policy achieves what you mean it to.</p>

<p>Ideally, test machines are modeled with policy from the ground up,
starting with Just Enough Operating System to allow them to run Chef.
This ensures all the details of the system have been captured and are
reproducible.</p>

<p>Other ways of reproducing state work, but come with the burden of
having to drag that knowledge around with you. Snapshots, kickstart or
bootstrap scripts, and even manual configuration will all work so long
as you can promise they&#8217;re accurate.</p>

<p>There are some situations where reproducing a test system is
impossible, or modeling it from the ground up is not an option. In
this case, a slow, careful, incremental application of policy, aided
by dry-run mode and human intuition is the safest way to start. Chef&#8217;s
why-run mode can help aide intuition by publishing assumptions about
what&#8217;s going on. &#8220;I would start the service, assuming the software had
been previously installed&#8221; helps quite a bit during development.</p>

<p>Finally, increasing the resolution of our policies will help the most
in the long term. The more robots the better. Ensuring the contents of
configuration files is good. Making sure that they are only ones
present in a conf.d directory is better. As a community, we need to
produce as much high quality, trusted, tested, and reuseable policy as
possible.</p>

<p>Good luck, and be careful out there.</p>

<p>-s</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CFEngine Puppet and Chef Part 3]]></title>
    <link href="http://someara.github.com/post/2011/12/30/cfengine-puppet-and-chef-part-3/"/>
    <updated>2011-12-30T20:11:00-05:00</updated>
    <id>http://someara.github.com/post/2011/12/30/cfengine-puppet-and-chef-part-3</id>
    <content type="html"><![CDATA[<p>At the end of the last installment, we used Puppet to create a Chef server. That brings us full circle, and the only thing we have left to do is examine how Chef works. We&#8217;ll do that by looking at the code that gave us our original CFEngine server.</p>

<h2> Chef </h2>


<p><img class="right" src="http://farm4.staticflickr.com/3024/2417315604_ba73be6be2.jpg" width="300" height="300"></p>

<p>Since they&#8217;re both written in Ruby, people tend to compare Puppet and Chef. This is natural since they have a lot in common. Both are convergence based configuration management tools inspired by CFEngine. Both have stand alone discovery agents (facter and ohai, respectively), as well as RESTful APIs for gleaning node information from the server. It turns out, however, that Chef actually has a lot more in common with CFEngine.</p>

<p>Like CFEngine, Chef copies policy from the server and evaluates it on the edges. This allows for high scalability, since the server isn&#8217;t doing very much. Think of web application that does most of its work in the browser instead of on the server.</p>

<p>A Chef recipe is a collection of convergent <a href=http://wiki.opscode.com/display/chef/Resources target="_blank">resource</a> statements, and serves as the basic unit of intent. This is analogous to a CFEngine promise bundle. The Chef run list is how recipe ordering is defined, and is directly comparible to CFEngine&#8217;s bundlesqeuence. Using this approach makes it easy to reason about what&#8217;s going on when writing infrastructure as code.</p>

<h2> Chef Specials </h2>




<h3> Imperative programming and declarative interface </h3>


<p>While it&#8217;s true that Chef is just &#8220;pure ruby&#8221; and therefore imperative, to say that Chef is imperative without considering the declarative interface to resources is disingenuous at best. Using nothing but Chef resources, recipes look very much like their CFEngine and Puppet counterparts. The non-optimally ordered Chef version of NTP converges in the same number of runs as the CFEngine example from the first installment. This is because the <a href=http://www.iu.hio.no/~mark/papers/immune.pdf target="_blank">underlying science</a> of convergent operators is the same.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># service</span>
</span><span class='line'><span class="n">service</span> <span class="s2">&quot;ntp&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">action</span> <span class="o">[</span> <span class="ss">:enable</span><span class="p">,</span> <span class="ss">:start</span> <span class="o">]</span>
</span><span class='line'>  <span class="n">ignore_failure</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># file </span>
</span><span class='line'><span class="n">template</span> <span class="s2">&quot;/etc/ntp.conf&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;ntp.conf.erb&quot;</span>
</span><span class='line'>  <span class="n">owner</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'>  <span class="n">group</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'>  <span class="n">mode</span> <span class="mo">0644</span>
</span><span class='line'>  <span class="n">notifies</span> <span class="ss">:restart</span><span class="p">,</span> <span class="s2">&quot;service[ntp]&quot;</span>
</span><span class='line'>  <span class="n">ignore_failure</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># package </span>
</span><span class='line'><span class="n">package</span> <span class="s2">&quot;ntp&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">action</span> <span class="ss">:install</span>
</span><span class='line'>  <span class="n">ignore_failure</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href=http://bit.ly/vPixyI target="_blank">When and where order matters</a>, imperative ordering isolated within a recipe is the most intuitive way for sysadmins to accomplish tasks within the convergent model. &#8220;Install a package, edit a config file, and start the service&#8221; is how most people think about the task. Imperative ordering of declarative statements give the best of both worlds. When order does NOT matter, it&#8217;s safe to re-arrange recipe ordering in the Chef run list.</p>

<h3> Multiphase execution </h3>


<p>The real trick to effective Chef cookbook development is to understand the <a href=http://wiki.opscode.com/display/chef/Anatomy+of+a+Chef+Run target="_blank">Anatomy of a Chef Run</a>. When a Chef recipe is evaluated in the compilation phase, encountered resources are added to the Resource Collection, which is an array of evaluated resources with deferred execution.</p>

<p>The compile phase of this recipe would add 99 uniquely named, 12 oz, convergent beer_bottles to the collection, and the configure phase would take them down and pass them around. Subsequent runs would do nothing.</p>

<figure class='code'><figcaption><span>thanks jtimberman! </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">size</span> <span class="o">=</span> <span class="p">((</span><span class="mi">2</span> <span class="o">*</span> <span class="mi">3</span><span class="p">)</span> <span class="o">*</span> <span class="mi">4</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'><span class="mi">99</span><span class="o">.</span><span class="n">downto</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="n">beer_bottle</span> <span class="s2">&quot;bottle-</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">oz</span> <span class="n">size</span>
</span><span class='line'>    <span class="n">action</span> <span class="o">[</span> <span class="ss">:take_down</span><span class="p">,</span> <span class="ss">:pass_around</span> <span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The idea is that you can take advantage of the full power of Ruby to make decisions about what to declare about your resources. Most people just use the built in Chef APIs to consult chef-server for topology information about their infrastructure. However, there&#8217;s nothing stopping you from importing random Ruby modules and accessing existing SQL databases instead.</p>

<p>Want to name name servers after your Facebook friends? <a href=http://rfacebook.rubyforge.org/ type="_blank">Go for it.</a> Want your MOTD to list all James Brown albums released between 1980 and 1990? <a href=https://github.com/buntine/discogs type="_blank">Not a problem</a>. The important part is that things are ultimately managed with a declarative, idempotent, and convergent resource interface.</p>

<h2> cfengine.rb </h2>


<p>Let&#8217;s take a look at the recipe that gave us our original CFEngine server.</p>

<figure class='code'><figcaption><span> (server.rb)</span> <a href='http://someara.github.com/affs-blog/cookbooks/cfengine/recipes/server.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#######################################################</span>
</span><span class='line'><span class="c1">##</span>
</span><span class='line'><span class="c1">## Installs me some cfengine</span>
</span><span class='line'><span class="c1">##</span>
</span><span class='line'><span class="c1">#########################################################</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># variables</span>
</span><span class='line'><span class="n">cfdir</span> <span class="o">=</span> <span class="s2">&quot;/var/cfengine&quot;</span>
</span><span class='line'><span class="n">node</span><span class="o">.</span><span class="n">set</span><span class="o">[</span><span class="ss">:cfengine</span><span class="o">][</span><span class="ss">:server</span><span class="o">]=</span><span class="kp">true</span>
</span><span class='line'><span class="n">cfengine_clients</span> <span class="o">=</span> <span class="n">search</span><span class="p">(</span><span class="ss">:node</span><span class="p">,</span> <span class="s1">&#39;cfengine_client:true&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#######################################################</span>
</span><span class='line'><span class="c1"># packages</span>
</span><span class='line'><span class="c1">#######################################################</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># cfengine</span>
</span><span class='line'><span class="n">package</span> <span class="s2">&quot;cfengine&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#######################################################</span>
</span><span class='line'><span class="c1"># files, templates, and directories</span>
</span><span class='line'><span class="c1">#######################################################</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># masterfiles</span>
</span><span class='line'><span class="n">directory</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">cfdir</span><span class="si">}</span><span class="s2">/masterfiles&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">action</span> <span class="ss">:create</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># cfengine input files</span>
</span><span class='line'><span class="sx">%w{ inputs masterfiles }</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">dir</span><span class="o">|</span>
</span><span class='line'>  <span class="sx">%w{ failsafe cfengine_stdlib global garbage_collection cfengine }</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>    <span class="n">template</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">cfdir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">c</span><span class="si">}</span><span class="s2">.cf&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">source</span> <span class="s2">&quot;inputs/</span><span class="si">#{</span><span class="n">c</span><span class="si">}</span><span class="s2">.cf.erb&quot;</span>
</span><span class='line'>      <span class="n">variables</span><span class="p">(</span> <span class="ss">:cfengine_server</span> <span class="o">=&gt;</span> <span class="n">node</span> <span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># updates</span>
</span><span class='line'>  <span class="n">template</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">cfdir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">dir</span><span class="si">}</span><span class="s2">/update.cf&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">source</span> <span class="s2">&quot;inputs/update.cf.erb&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># promises.cf</span>
</span><span class='line'><span class="n">template</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">cfdir</span><span class="si">}</span><span class="s2">/inputs/promises.cf&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;inputs/promises-server.cf.erb&quot;</span>
</span><span class='line'>  <span class="n">variables</span><span class="p">(</span> <span class="ss">:cfengine_clients</span> <span class="o">=&gt;</span> <span class="n">cfengine_clients</span> <span class="p">)</span>
</span><span class='line'>  <span class="n">notifies</span> <span class="ss">:restart</span><span class="p">,</span> <span class="s2">&quot;service[cf-serverd]&quot;</span>
</span><span class='line'>  <span class="n">notifies</span> <span class="ss">:restart</span><span class="p">,</span> <span class="s2">&quot;service[cf-execd]&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">#######################################################</span>
</span><span class='line'><span class="c1"># Distribution only</span>
</span><span class='line'><span class="c1">#######################################################</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># promises.cf</span>
</span><span class='line'><span class="n">template</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">cfdir</span><span class="si">}</span><span class="s2">/masterfiles/promises.cf&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;inputs/promises-client.cf.erb&quot;</span>
</span><span class='line'>  <span class="n">variables</span><span class="p">(</span> <span class="ss">:cfengine_clients</span> <span class="o">=&gt;</span> <span class="n">cfengine_clients</span> <span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># puppet.cf</span>
</span><span class='line'><span class="n">template</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">cfdir</span><span class="si">}</span><span class="s2">/masterfiles/puppet.cf&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;inputs/puppet.cf.erb&quot;</span>
</span><span class='line'>  <span class="n">variables</span><span class="p">(</span> <span class="ss">:cfengine_clients</span> <span class="o">=&gt;</span> <span class="n">cfengine_clients</span> <span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">## puppet server policy distribution</span>
</span><span class='line'><span class="n">directory</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">cfdir</span><span class="si">}</span><span class="s2">/masterfiles/puppet&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">action</span> <span class="ss">:create</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># puppet/site.pp</span>
</span><span class='line'><span class="n">remote_directory</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">cfdir</span><span class="si">}</span><span class="s2">/masterfiles/puppet&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;server/puppet&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">#######################################################</span>
</span><span class='line'><span class="c1"># services</span>
</span><span class='line'><span class="c1">#######################################################</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># poke a hole in the firewall</span>
</span><span class='line'><span class="c1"># FIXME Do this properly once COOK-688 is done</span>
</span><span class='line'><span class="n">service</span> <span class="s2">&quot;iptables&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">action</span> <span class="o">[</span><span class="ss">:disable</span><span class="p">,</span><span class="ss">:stop</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">cfengine_services</span> <span class="o">=</span> <span class="sx">%w{</span>
</span><span class='line'><span class="sx">  cf-execd</span>
</span><span class='line'><span class="sx">  cf-serverd</span>
</span><span class='line'><span class="sx">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># services</span>
</span><span class='line'><span class="n">cfengine_services</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
</span><span class='line'>  <span class="n">service</span> <span class="n">s</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">action</span> <span class="o">[</span><span class="ss">:enable</span><span class="p">,</span><span class="ss">:start</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<h2> Topology management </h2>


<p>When a node is bootstrapped with Chef, a run list of roles or recipes is requested by the node itself. After that, the host is found by recipes running elsewhere in the infrastructure by <a href=http://bit.ly/vI5Z9l target="_blank">searching</a> for roles or attributes. This is contrasted from the CFEngine and Puppet techniques of matching classes based on a hostname, FQDN, IP, or other found information.</p>

<p>This approach has the effect of decoupling a node&#8217;s name from its functionality. Line 10 in <code>cfengine.rb</code> above searches out node objects and later be passes them to the <code>promises-server.cf.erb</code> template for authorization.</p>

<h2> Wrapping up </h2>


<p>So there you have it folks. Chef making CFEngine making Puppet making Chef. These tools can be used to automate literally anything, and they&#8217;re pretty easy to use once you figure out how they work. I was going to throw some Bcfg2 and LCFG in there just for fun, but I only had some much free time =)</p>

<p>Configuration mangement is like a portal.</p>

<p>-s</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CFEngine Puppet and Chef Part 2]]></title>
    <link href="http://someara.github.com/post/2011/12/30/cfengine-puppet-and-chef-part-2/"/>
    <updated>2011-12-30T20:10:00-05:00</updated>
    <id>http://someara.github.com/post/2011/12/30/cfengine-puppet-and-chef-part-2</id>
    <content type="html"><![CDATA[<p>In the previous installment, we used Chef to configure CFEngine to serve policy that allowed us to create a Puppet service. In this one, we&#8217;ll have Chef use that Puppet service to create a Chef server. If you think this is a ridiculous thing to do, I would be inclined to agree with you. However, this is my blog so I make the rules.</p>

<h2> Puppet </h2>


<p>Puppet at its core works like CFEngine. Statements in Puppet are convergent operators, in that they are declarative (and therefore idempotent), and convergent in that they check a resource&#8217;s state before taking any action. Like the NTP example from the CFEngine installment, non-optimally ordered execution will usually work itself out after repeated Puppet runs.</p>

<p>Unlike CFEngine, where policy is copied and evaluated on the edges, Puppet clients connect to the Puppet server where configuration is determined based on a certificate CN. A catalog of serialized configuration data is shipped back to the client for execution. This catalog is computed based on the contents of the manifests stored on the server, as well as a collection of <a href=http://puppetlabs.com/puppet/related-projects/facter target="_blank">facts</a> collected from the clients. Puppet facts, like CFEngine hard classes, are discoverable things about a node such as OS version, hostname, kernel version, network information, etc.</p>

<p><img class="left" src="http://images3.wikia.nocookie.net/__cb20050917222913/memoryalpha/en/images/d/d6/Coffee_replicates_then_mug.jpg" width="300" height="300"></p>

<p>Puppet works a bit like the food replicators in Star Trek. <a href=http://docs.puppetlabs.com/references/stable/type.html target="_blank">Resources</a> make up the basic atoms of a system, and the precise configuration of each must be defined. If a resource is defined twice in a manifest with conflicting states, Puppet refuses to run.</p>

<p>Ordering can be specified though <code>require</code> statements that set up relations between resources. These are used to build a <a href=http://en.wikipedia.org/wiki/Directed_graph target="_blank">directed graph</a>, which Puppet sorts <a href=http://en.wikipedia.org/wiki/Topological_sorting>topologically</a> and uses to determine the final ordering. If a resource in a chain fails for some reason, dependent resources down the graph will be skipped.</p>

<p>This allows for isolation of non-related resources collections. For example, if a package repository for some reason fails to deliver the &#8216;httpd&#8217; package, its dependent configuration file and service resources will be skipped. This has nothing to do with an SSH resource collection, so the resources concerning that service will be executed even though the httpd collection had previously failed.</p>

<p>Just be careful not to create the coffee without the cup.</p>

<h2> chef.pp </h2>


<p>Let&#8217;s examine a Puppet manifest that creates a Chef server on Centos 6.</p>

<figure class='code'><figcaption><span> (chef.pp)</span> <a href='http://someara.github.com/affs-blog/cookbooks/cfengine/files/default/server/puppet/manifests/classes/chef.pp'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="n">chef</span><span class="o">-</span><span class="n">server</span> <span class="p">{</span>
</span><span class='line'><span class="c1"># install FrameOS package repo</span>
</span><span class='line'>  <span class="nb">exec</span> <span class="p">{</span> <span class="s1">&#39;rbel6-release&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">command</span>  <span class="o">=&gt;</span> <span class="s2">&quot;/bin/rpm -Uvh http://rbel.co/rbel6&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">unless</span> <span class="o">=&gt;</span> <span class="s2">&quot;/bin/rpm -qa | grep rbel6-release&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># list of packages to install</span>
</span><span class='line'>  <span class="vg">$packages</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>    <span class="s2">&quot;couchdb&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;rabbitmq-server&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;rubygem-chef&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;rubygem-chef-server&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;rubygem-chef-solr&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;rubygem-chef-expander&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;rubygem-chef-server-api&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;rubygem-chef-server-webui&quot;</span>
</span><span class='line'>  <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># install all the packages</span>
</span><span class='line'>  <span class="n">package</span> <span class="p">{</span> <span class="vg">$packages</span><span class="p">:</span>
</span><span class='line'>    <span class="k">ensure</span> <span class="o">=&gt;</span> <span class="n">installed</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">Exec</span><span class="o">[</span> <span class="s1">&#39;rbel6-release&#39;</span> <span class="o">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># start couch</span>
</span><span class='line'>  <span class="n">service</span> <span class="p">{</span> <span class="s1">&#39;couchdb&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">ensure</span> <span class="o">=&gt;</span> <span class="n">running</span><span class="p">,</span>
</span><span class='line'>    <span class="n">enable</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>    <span class="n">hasstatus</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">Package</span><span class="o">[</span> <span class="vg">$packages</span> <span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># start rabbitmq</span>
</span><span class='line'>  <span class="n">service</span> <span class="p">{</span> <span class="s1">&#39;rabbitmq-server&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">ensure</span> <span class="o">=&gt;</span> <span class="n">running</span><span class="p">,</span>
</span><span class='line'>    <span class="n">enable</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>    <span class="n">hasstatus</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>    <span class="n">status</span> <span class="o">=&gt;</span> <span class="s2">&quot;service rabbitmq-server status | grep -e &#39;Pid .* running&#39;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">Package</span><span class="o">[</span> <span class="vg">$packages</span> <span class="o">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># #FIXME - poke proper hole</span>
</span><span class='line'><span class="c1"># turn off iptables </span>
</span><span class='line'>  <span class="n">service</span> <span class="p">{</span> <span class="s1">&#39;iptables&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">ensure</span> <span class="o">=&gt;</span> <span class="n">stopped</span><span class="p">,</span>
</span><span class='line'>    <span class="n">enable</span> <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span>
</span><span class='line'>    <span class="n">status</span> <span class="o">=&gt;</span> <span class="s2">&quot;/sbin/service iptables status | grep &#39;Table: filter&#39;&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># rabbitmq vhost</span>
</span><span class='line'>  <span class="nb">exec</span> <span class="p">{</span> <span class="s2">&quot;add vhost chef to rabbitmq&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">command</span> <span class="o">=&gt;</span> <span class="s2">&quot;/usr/sbin/rabbitmqctl add_vhost /chef&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">unless</span> <span class="o">=&gt;</span> <span class="s2">&quot;/usr/sbin/rabbitmqctl list_vhosts | grep ^/chef&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">Service</span><span class="o">[</span><span class="s1">&#39;rabbitmq-server&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># rabbitmq user</span>
</span><span class='line'>  <span class="nb">exec</span> <span class="p">{</span> <span class="s2">&quot;add user chef to rabbitmq&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">command</span> <span class="o">=&gt;</span> <span class="s2">&quot;/usr/sbin/rabbitmqctl add_user chef testing&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">unless</span> <span class="o">=&gt;</span> <span class="s2">&quot;/usr/sbin/rabbitmqctl list_users | grep chef&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">require</span> <span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>      <span class="no">Service</span><span class="o">[</span><span class="s1">&#39;rabbitmq-server&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="no">Exec</span><span class="o">[</span><span class="s1">&#39;add vhost chef to rabbitmq&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># rabbitmq permissions</span>
</span><span class='line'>  <span class="nb">exec</span> <span class="p">{</span> <span class="s2">&quot;add chef permissions to rabbitmq&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">command</span> <span class="o">=&gt;</span> <span class="s2">&quot;/usr/sbin/rabbitmqctl set_permissions -p /chef chef </span><span class="se">\&quot;</span><span class="s2">.*</span><span class="se">\&quot;</span><span class="s2"> </span><span class="se">\&quot;</span><span class="s2">.*</span><span class="se">\&quot;</span><span class="s2"> </span><span class="se">\&quot;</span><span class="s2">.*</span><span class="se">\&quot;</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">unless</span> <span class="o">=&gt;</span> <span class="s2">&quot;/usr/sbin/rabbitmqctl list_permissions -p /chef | grep ^chef&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">require</span> <span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>      <span class="no">Service</span><span class="o">[</span><span class="s1">&#39;rabbitmq-server&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="no">Exec</span><span class="o">[</span><span class="s1">&#39;add vhost chef to rabbitmq&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="no">Exec</span><span class="o">[</span><span class="s1">&#39;add user chef to rabbitmq&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># log directory</span>
</span><span class='line'>  <span class="n">file</span> <span class="p">{</span> <span class="s1">&#39;/var/log/chef&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">ensure</span> <span class="o">=&gt;</span> <span class="n">directory</span><span class="p">,</span>
</span><span class='line'>    <span class="n">owner</span> <span class="o">=&gt;</span> <span class="s2">&quot;root&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">mode</span> <span class="o">=&gt;</span> <span class="s2">&quot;755&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">Package</span><span class="o">[</span> <span class="vg">$packages</span> <span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># log files</span>
</span><span class='line'>  <span class="vg">$cheflogfiles</span> <span class="o">=</span> <span class="o">[</span> <span class="s1">&#39;/var/log/chef/solr.log&#39;</span><span class="p">,</span> <span class="s1">&#39;/var/log/chef/server.log&#39;</span><span class="p">,</span> <span class="s1">&#39;/var/log/chef/server-webui.log&#39;</span> <span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">file</span> <span class="p">{</span> <span class="vg">$cheflogfiles</span><span class="p">:</span>
</span><span class='line'>    <span class="k">ensure</span> <span class="o">=&gt;</span> <span class="n">present</span><span class="p">,</span>
</span><span class='line'>    <span class="n">owner</span> <span class="o">=&gt;</span> <span class="s2">&quot;root&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">mode</span> <span class="o">=&gt;</span> <span class="s2">&quot;644&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">require</span> <span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>      <span class="no">File</span><span class="o">[</span> <span class="s1">&#39;/var/log/chef&#39;</span> <span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="no">Package</span><span class="o">[</span> <span class="vg">$packages</span> <span class="o">]</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># begin running services</span>
</span><span class='line'>  <span class="n">service</span> <span class="p">{</span> <span class="s1">&#39;chef-server&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">ensure</span> <span class="o">=&gt;</span> <span class="n">running</span><span class="p">,</span>
</span><span class='line'>    <span class="n">enable</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">require</span> <span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>      <span class="no">Package</span><span class="o">[</span> <span class="vg">$packages</span> <span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="no">Exec</span><span class="o">[</span> <span class="s1">&#39;add vhost chef to rabbitmq&#39;</span> <span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="no">Exec</span><span class="o">[</span> <span class="s1">&#39;add user chef to rabbitmq&#39;</span> <span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="no">Exec</span><span class="o">[</span> <span class="s1">&#39;add chef permissions to rabbitmq&#39;</span> <span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="no">File</span><span class="o">[</span> <span class="vg">$cheflogfiles</span> <span class="o">]</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">service</span> <span class="p">{</span> <span class="s1">&#39;chef-solr&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">ensure</span> <span class="o">=&gt;</span> <span class="n">running</span><span class="p">,</span>
</span><span class='line'>    <span class="n">enable</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>    <span class="n">hasstatus</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">require</span> <span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>      <span class="no">Service</span><span class="o">[</span><span class="s1">&#39;chef-server&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">service</span> <span class="p">{</span> <span class="s1">&#39;chef-expander&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">ensure</span> <span class="o">=&gt;</span> <span class="n">running</span><span class="p">,</span>
</span><span class='line'>    <span class="n">enable</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>    <span class="n">hasstatus</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">require</span> <span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>      <span class="no">Service</span><span class="o">[</span><span class="s1">&#39;chef-solr&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">service</span> <span class="p">{</span> <span class="s1">&#39;chef-server-webui&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">ensure</span> <span class="o">=&gt;</span> <span class="n">running</span><span class="p">,</span>
</span><span class='line'>    <span class="n">enable</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">require</span> <span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>      <span class="no">Service</span><span class="o">[</span><span class="s1">&#39;chef-server&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="no">Service</span><span class="o">[</span> <span class="s1">&#39;iptables&#39;</span> <span class="o">]</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<h2> Picking it apart </h2>


<p>Line 1 is a Puppet class definition. This groups the resource statments between together, allowing us to assign <code>chef-server</code> to a node based on its hostname. This can be accomplished with an explicit nodes.pp definition, or with an external node classifier.</p>

<p>Line 3 is an <code>exec</code> resource, which we can later refer to with its name: <code>rbel6-release</code>. When using <code>exec</code> resources, it&#8217;s up to you to specify a convergence check. In this case, we used the <code>unless</code> keyword to check the return status of an rpm command. The same goes for <code>command</code> promise types in CFEngine, or an <code>execute</code> resources in Chef.</p>

<p>Line 9 is an example of an array variable, which is iterated over in line 21, much like a CFEngine slist.</p>

<p>Everything else is a standard Puppet resource declaration, each of which have a type, a name, and an argument list. Like CFEngine promises, each type has various intentions available under the hood. Packages can be installed. Services can be running or stopped, and files can be present with certain contents and permissions.</p>

<p>Refer to the Puppet <a href=http://docs.puppetlabs.com/ target="_blank">documentation</a> for more details.</p>

<h2> On to Chef </h2>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>knife bootstrap centos6-3 -r <span class="s1">&#39;role[affs-chef]&#39;</span> -N <span class="s2">&quot;affs-chef-1.example.com&quot;</span> -E development -d affs-omnibus-pre -x root
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CFEngine Puppet and Chef Part 1]]></title>
    <link href="http://someara.github.com/post/2011/12/30/cfengine-puppet-and-chef-part-1/"/>
    <updated>2011-12-30T20:09:00-05:00</updated>
    <id>http://someara.github.com/post/2011/12/30/cfengine-puppet-and-chef-part-1</id>
    <content type="html"><![CDATA[<h2> Introduction </h2>


<p>Over the past few years, the topic of Infrastructure Automation has received a huge amount of attention. The three most commonly used tools for doing this (in order of appearance) are CFEngine, Puppet, and Chef. This article explores each of them by using one to set up another. If you have a chef-server or Hosted Chef account, you can follow along by following the instructions in the setup section. (Full disclosure: I work for Opscode, creators of Chef.)</p>

<h2> Infrastructure </h2>


<p><a href=http://www.infrastructures.org target="_blank">“Infrastructure”</a> turns out to be the hardest thing to explain when discussing automation, yet is the most critical to understand. In this context, Infrastructure isn’t anything physical (or virtualized) like servers or networks. Instead, what we’re talking about is all the “stuff” that is configured across machines to enable an application or service.</p>

<p>In practice, “stuff” translates to operating system baselines, kernel settings, disk mounts, OS user accounts, directories, symlinks, software installations, configuration files, running processes, etc. People of the ITIL persuasion may think of these as Configuration Items. Units of management are composed into larger constructs, and complexity arises as these arrangements become more intricate.</p>

<p>Services running in an Infrastructure need to communicate with each other, and do so via networks. Even when running on a single node, things still communicate over a loopback address or a Unix domain socket. This means that Infrastructure has a topology, which is in itself yet another thing to manage.</p>

<h2> Automation </h2>


<p><img class="left" src="http://upload.wikimedia.org/wikipedia/commons/7/75/Duck_of_Vaucanson.jpg"></p>

<p>Here is a picture of a duck.</p>

<p>This duck happens to be an <a href=http://en.wikipedia.org/wiki/Automaton target="_blank">automaton</a>. An automaton is a self-operating machine. This one pretends to digest grain. It interacts with its environment by taking input and producing output. To continue operating, the duck requires maintenance. It needs to be wound, cleaned, and repaired. Automated services running on a computer are no different.</p>

<p>Once turned on, an automated service takes input, does something useful, then leaves logs and other data in its wake. Its machinery is the arrangement of software installation, configuration, and the running state of a process. Maintenance is performed in a <a href=http://en.wikipedia.org/wiki/Autonomic_Computing target="_blank">control loop</a>, where an agent comes around at regular intervals inspecting its parts and fixing anything that’s broken.</p>

<p>In automated configuration management, the name of the game is hosting policy. The agents that build and maintain systems pull down blueprints and set to work building our automatons. When systems come back up from maintenance or new ones spring into existence, they configure themselves by downloading policy from the server.</p>

<h2> Setup </h2>


<p>If you&#8217;d like to follow along by configuring your own machines with knife, follow the setup instructions <a href=/cfchefipuppetengine-setup target="_blank">here</a>. The setup will get your Chef workstation configured, code checked out from my blog git repo, and uploaded to chef-server for use. Otherwise, you can just browse the source <a href=https://github.com/someara/affs-blog target="_blank">here</a></p>

<h2> CFEngine </h2>


<p><img class="right" src="http://farm1.staticflickr.com/120/293693669_59574a7640_m.jpg" title="A picture of what a cloud may look like" ></p>

<p>CFEngine is a system based on <a href=http://research.iu.hio.no/papers/rosegarden.pdf target="_blank">promise</a> <a href=http://project.iu.hio.no/papers/origin2.pdf target="_blank">theory</a>. Promises are the basic atoms of the CFEngine universe. They have names, types, and intentions (among other things), and each acts as a convergent operator to move its subject toward an intended state. Like the parts in our duck, promises are assembled to create a larger whole.</p>

<p>Promises of various types are capable of different things. Promises of type &#8220;package&#8221; can interact with a package manager to make sure somthing is installed or removed, while a promise of type &#8220;file&#8221;, can copy, edit, and set permissions. Processes can be started or stopped, and commands can be ran if needed. Read all about them in the CFEngine <a href=http://cfengine.com/manuals/cf3-reference.html target="_blank">reference manual</a>.</p>

<p>Promises provide a <a href=http://c2.com/cgi/wiki?DeclarativeDefinition target="_blank">declarative</a> interface to resources under management, which has the remarkably handy attribute of being <a href=http://en.wikipedia.org/wiki/Idempotence target="_blank">idempotent</a>. An idempotent function gives the same result when applied multiple times. This allows our duck repairing maintence loop (in the form of cf-agent on a cron) to come around and safely execute instructions without having to worry about side effects. Consider &#8220;the line &#8216;foo&#8217; should exist in the file&#8221; vs &#8220;append &#8216;foo&#8217; to the end of the file&#8221;; the non-declarative &#8216;append&#8217; would not be safe to repeat.</p>

<p><a href=http://en.wikipedia.org/wiki/Convergence_(mathematics) target="_blank">Convergent</a> maintenance refers to the continuous repair of a system towards a desired state. At the individual promise level, convergence happens in a single run of the maintenance loop. If a package is supposed to be installed but isn&#8217;t, action will be taken to fix it. If a process is not running but should be, action will be taken again. Convergence in a larger system of promises can take multiple runs if things are processed in a non-optimal order. Consider the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Start the NTP service.
</span><span class='line'>Make sure the NTP configuration file is correct, restart the NTP service if repaired.
</span><span class='line'>Install the NTP package.</span></code></pre></td></tr></table></div></figure>


<p>Assuming a system with a base install, the first promise would fail to be kept. The NTP binary is not available, since we haven&#8217;t installed its package yet. The second promise would write the configuration file, but fail to restart the service. The third promise would succeed, assuming an appropriate package repo was available and functioning properly. After the first run is complete, the system has converged closer to where we want it to be, but isn&#8217;t quite there yet. Applying the functions again gets us closer to our goal.</p>

<p>The second run of the loop would succeed in starting the service, but would be using the wrong configuration file. The package install from the previous loop clobbered the one written previously. Promise number two would fix the config and restart the service, and the third would do nothing because the package is already installed. Finally, we&#8217;ve converged to our desired system state. A third loop would take no actions at all.</p>

<h2> Kicking things off </h2>


<p>To set up a CFEngine server, invoke the following Chef command:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>knife bootstrap centos6-1 -r <span class="s1">&#39;role[cfengine]&#39;</span> -N <span class="s2">&quot;cfengine-1.example.com&quot;</span> -E development -d affs-omnibus-pre -x root
</span></code></pre></td></tr></table></div></figure>


<p>When Chef is done doing its thing, you&#8217;ll end up with a functioning CFEngine policy host, happily promising to serve policy. Log into the freshly configured machine and check it out. Three things have happened. First, the cfengine package itself has been installed. Second, two directories have been created and populated: <code>/var/cfengine/inputs</code>, and <code>/var/cfengine/masterfiles</code>.</p>

<p>The <code>inputs</code> directory contains configuration for the CFEngine itself, which includes a promise to make the contents of <code>masterfiles</code> available for distribution. When a CFEngine client comes up, it will copy the contents of <code>/var/cfengine/masterfiles</code> from the server into its own <code>inputs</code> directory.</p>

<h2> Examining policy </h2>


<p>CFEngine&#8217;s main configuration file is <code>promises.cf</code>, from which everything else flows.  Here&#8217;s a short snippet:</p>

<figure class='code'><figcaption><span>promises.cf snippet  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">body</span> <span class="n">common</span> <span class="n">control</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">bundlesequence</span>  <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;update&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;garbage_collection&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;cfengine&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;puppet_server&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">inputs</span>  <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;update.cf&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;cfengine_stdlib.cf&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;cfengine.cf&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;garbage_collection.cf&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;puppet.cf&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The bundlesequence section tells cf-agent what promise bundles to execute, and in what order. The one we&#8217;re examining today is named puppet_server, found in <code>puppet.cf</code></p>

<figure class='code'><figcaption><span> (puppet.cf.erb)</span> <a href='http://someara.github.com/affs-blog/cookbooks/cfengine/templates/default/inputs/puppet.cf.erb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">########################################################</span>
</span><span class='line'><span class="c1">##</span>
</span><span class='line'><span class="c1">## Installs me some puppet</span>
</span><span class='line'><span class="c1">##</span>
</span><span class='line'><span class="c1">#########################################################</span>
</span><span class='line'>
</span><span class='line'><span class="n">bundle</span> <span class="n">agent</span> <span class="n">puppet_server</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="n">vars</span><span class="p">:</span>
</span><span class='line'>  <span class="s2">&quot;foo&quot;</span> <span class="n">slist</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="s2">&quot;Hi.&quot;</span> <span class="p">};</span>
</span><span class='line'>  <span class="s2">&quot;bar&quot;</span> <span class="n">slist</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="s2">&quot;I&#39;m like a Chef attribute.&quot;</span> <span class="p">};</span>
</span><span class='line'>  <span class="s2">&quot;redhat_packages&quot;</span> <span class="n">slist</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="s2">&quot;puppet-server&quot;</span><span class="p">,</span> <span class="s2">&quot;puppet&quot;</span><span class="p">,</span> <span class="s2">&quot;facter&quot;</span> <span class="p">};</span>
</span><span class='line'>  <span class="s2">&quot;debian_packages&quot;</span> <span class="n">slist</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="s2">&quot;puppetmaster&quot;</span><span class="p">,</span> <span class="s2">&quot;puppet&quot;</span><span class="p">,</span> <span class="s2">&quot;vim-puppet&quot;</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">classes</span><span class="p">:</span>
</span><span class='line'>  <span class="s2">&quot;puppetmaster_enabled&quot;</span> <span class="n">expression</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="n">returnszero</span><span class="p">(</span><span class="s2">&quot;/sbin/chkconfig puppetmaster&quot;</span><span class="p">,</span> <span class="s2">&quot;noshell&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="s2">&quot;iptables_enabled&quot;</span> <span class="n">expression</span> <span class="o">=&gt;</span>
</span><span class='line'>      <span class="n">returnszero</span><span class="p">(</span><span class="s2">&quot;/sbin/service iptables status&quot;</span><span class="p">,</span> <span class="s2">&quot;noshell&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">files</span><span class="p">:</span>
</span><span class='line'>  <span class="s2">&quot;/etc/puppet&quot;</span>
</span><span class='line'>    <span class="n">comment</span> <span class="o">=&gt;</span> <span class="s2">&quot;default configuration file for puppet&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">copy_from</span> <span class="o">=&gt;</span> <span class="n">local_cp</span><span class="p">(</span><span class="s2">&quot;/var/cfengine/masterfiles/puppet&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="n">depth_search</span> <span class="o">=&gt;</span> <span class="n">recurse</span><span class="p">(</span><span class="s2">&quot;inf&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="n">perms</span> <span class="o">=&gt;</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;644&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="n">classes</span> <span class="o">=&gt;</span> <span class="n">if_repaired</span><span class="p">(</span><span class="s2">&quot;restart_puppetmaster&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">packages</span><span class="p">:</span>
</span><span class='line'>  <span class="n">redhat</span><span class="o">|</span><span class="no">CentOS</span><span class="o">::</span>
</span><span class='line'>  <span class="s2">&quot;$(redhat_packages)&quot;</span>
</span><span class='line'>    <span class="n">comment</span> <span class="o">=&gt;</span> <span class="s2">&quot;install redhat based distro packages&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">package_policy</span> <span class="o">=&gt;</span> <span class="s2">&quot;add&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">package_method</span> <span class="o">=&gt;</span> <span class="n">yum</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">debian</span><span class="o">|</span><span class="n">ubuntu</span><span class="o">::</span>
</span><span class='line'>  <span class="s2">&quot;$(debian_packages)&quot;</span>
</span><span class='line'>    <span class="n">comment</span> <span class="o">=&gt;</span> <span class="s2">&quot;install debian based distro packages&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">package_policy</span> <span class="o">=&gt;</span> <span class="s2">&quot;add&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">package_method</span> <span class="o">=&gt;</span> <span class="n">apt</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">processes</span><span class="p">:</span>
</span><span class='line'>  <span class="s2">&quot;/usr/bin/ruby /usr/sbin/puppetmasterd&quot;</span>
</span><span class='line'>    <span class="n">comment</span> <span class="o">=&gt;</span> <span class="s2">&quot;the puppetmaster service&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">restart_class</span> <span class="o">=&gt;</span> <span class="n">canonify</span><span class="p">(</span><span class="s2">&quot;restart_puppetmaster&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">commands</span><span class="p">:</span>
</span><span class='line'>  <span class="s2">&quot;/bin/echo&quot;</span>
</span><span class='line'>    <span class="n">args</span> <span class="o">=&gt;</span> <span class="s2">&quot;$(foo) $(bar)&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">ifvarclass</span> <span class="o">=&gt;</span> <span class="n">canonify</span><span class="p">(</span><span class="s2">&quot;restart_puppetmaster&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="s2">&quot;/sbin/service puppetmaster restart&quot;</span>
</span><span class='line'>    <span class="n">ifvarclass</span> <span class="o">=&gt;</span> <span class="n">canonify</span><span class="p">(</span><span class="s2">&quot;restart_puppetmaster&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="s2">&quot;/sbin/chkconfig puppetmaster on&quot;</span>
</span><span class='line'>    <span class="n">ifvarclass</span> <span class="o">=&gt;</span> <span class="s2">&quot;!puppetmaster_enabled&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s2">&quot;/sbin/service iptables stop&quot;</span>
</span><span class='line'>    <span class="n">ifvarclass</span> <span class="o">=&gt;</span> <span class="s2">&quot;iptables_enabled&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s2">&quot;/sbin/chkconfig iptables off&quot;</span>
</span><span class='line'>    <span class="n">ifvarclass</span> <span class="o">=&gt;</span> <span class="s2">&quot;iptables_enabled&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">########################################################</span>
</span><span class='line'>
</span><span class='line'><span class="n">body</span> <span class="n">perms</span> <span class="nb">system</span><span class="p">(</span><span class="nb">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">mode</span> <span class="o">=&gt;</span> <span class="s2">&quot;$(p)&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A promise bundle is CFEngine&#8217;s basic unit of intent. It&#8217;s a place to logically group related promises. Within a bundle, CFEngine processes things with <a href=http://cfengine.com/manuals/cf3-reference.html#Normal-ordering target="_blank">normal ordering</a>. That is, variables are converged first, then classes, then files, then packages, and so on. I wrote the bundle sections in normal order to make it easier to read, but they could be rearranged and still have the same effect. Without going into too much detail about the language, I&#8217;ll give a couple hints to help with groking the example.</p>

<p>First, in CFEngine, the word &#8216;class&#8217; does not mean what it normally does in other programming languages. Instead, classes are boolean flags that describe context. Classes can be &#8216;hard classes&#8217;, which are discovered attributes about the environment (hostname, operating system, time, etc), or &#8216;soft classes&#8217;, which are defined by the programmer. In the above example, puppetmaster_enabled and iptables_enabled are soft classes set based on the return status of a command. In the place of <code>if</code> or <code>case</code> statements, boolean checks on classes are used.</p>

<p>Second, there are no control statements like <code>for</code> or <code>while</code>. Instead, when lists are encountered they are automatically iterated. Check out the packages section for examples of both class decisions and list iteration. Given those two things, you should be able to work your way through the example. However, there&#8217;s really no getting around reading the reference manual if you want to learn CFEngine.</p>

<h2> On to Puppet </h2>


<p>Finally, let&#8217;s go ahead and use Chef to bring up a CFEngine client, which will be turned into a Puppet server.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>knife bootstrap centos6-2 -r <span class="s1">&#39;role[puppet]&#39;</span> -N <span class="s2">&quot;puppet-1.example.com&quot;</span> -E development -d affs-omnibus-pre -x root
</span></code></pre></td></tr></table></div></figure>


<p>The first run will fail, since the host&#8217;s IP isn&#8217;t yet in the cfengine server&#8217;s allowed hosts lists. Complete the convergence by running these commands:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>knife ssh <span class="s2">&quot;role:cfengine&quot;</span> -a ipaddress chef-client
</span><span class='line'>knife ssh <span class="s2">&quot;role:puppet&quot;</span> -a ipaddress chef-client
</span><span class='line'>knife ssh <span class="s2">&quot;role:puppet&quot;</span> -a ipaddress chef-client
</span></code></pre></td></tr></table></div></figure>


<p>And viola! A working Puppet server, serving policy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuration Management Strategies]]></title>
    <link href="http://someara.github.com/post/2011/07/27/configuration-management-strategies/"/>
    <updated>2011-07-27T12:32:00-04:00</updated>
    <id>http://someara.github.com/post/2011/07/27/configuration-management-strategies</id>
    <content type="html"><![CDATA[<p>I just watched the “To Package or Not to Package” video from DevOps days Mountain View. The discussion was great, and there were some moments of hilarity. If you haven’t watched it yet, check it out <a href=http://goo.gl/KdDyf> here </a></p>

<p>Stephen Nelson Smith, I salute you, sir.</p>

<p>I’m quite firmly in the “Let your CM tool handle your config files” camp. To explain why, I think it’s worth briefly examining the evolution of configuration management strategies.</p>

<p>In order to keep this post as vague and heady as possible, no distinction between “system” and “application” configurations shall be made.</p>

<h2> What is a configuration file? </h2>


<p>Configuration files are text files that control the behavior of programs on a machine. That’s it. They are usually read once, when a program is started from a prompt or init script. A process restart or HUP is typically required for changes to take effect.</p>

<h2> What is configuration management, really? </h2>


<p>When thinking about configuration management, especially across multiple machines, it is easy to equate the task to file management. Configs do live in files, after all. Packages are remarkably good at file management, so it’s natural to want to use them.</p>

<p>However, the task goes well beyond that.</p>

<p>An important attribute of an effective management strategy, config or otherwise, is that it reduces the amount of complexity (aka work) that humans need to deal with. But what is the work that we’re trying to avoid?</p>

<h2> Dependency Analysis and Runtime Configuration </h2>


<p><img class="right" src="http://farm8.staticflickr.com/7239/7389252518_7c27eb1472_n.jpg">
Two tasks that systems administrators concern themselves with doing are dependency analysis and runtime configuration.</p>

<p>Within the context of a single machine, dependency analysis usually concerns software installation. Binaries depend on libraries and scripts depend on binaries. When building things from source, headers and compilers are needed. Keeping the details of all this straight is no small task. Packages capture these relationships in their metadata, the construction of which is painstaking and manual. Modern linux distributions can be described as collections of packages and the metadata that binds them. Go out and hug a package maintainer today.</p>

<p>Within the context of infrastructure architecture, dependency analysis involves stringing together layers of services and making individual software components act in concert. A typical web application might depend on database, caching, and email relay services being available on a network. A VPN or WiFi service might rely on PKI, Radius, LDAP and Kerberos services.</p>

<p>Runtime configuration is the process of taking all the details gathered from dependency analysis and encoding them into the system. Appropriate software needs to be installed, configuration files need to be populated, and kernels need to be tuned. Processes need to be started, and of course, it should all still work after a reboot.</p>

<h2> Manual Configuration </h2>


<p><img class="left" src="http://farm5.staticflickr.com/4139/4805330106_926dfc074f_m.jpg"></p>

<p>Once upon a time, all systems were configured manually. This strategy is the easiest to understand, but the hardest one to execute. It typically happens in development and small production environments where configuration details are small enough to fit into a wiki or spreadsheet. As a network’s size and scope increases, management efforts became massive, time consuming, and prone to human error. Details end up in the heads of a few key people and reproducibility is abysmal. This is obviously unsustainable.</p>

<h2> Scripting </h2>


<p><img class="right" src="http://farm4.staticflickr.com/3101/2428706650_d1fc862fdc_m.jpg">
The natural progression away from manual configuration was custom scripting. Scripting reduced management complexity by automating things using languages like Bash and Perl. Tutorials and documentation instruction like “add the following line to your /etc/sshd_config” were turned into automated scripts that grepped, sed’ed, appended, and clobbered. These scripts were typically very brittle and would only produce desired outcome after their first run.</p>

<h2> File Distribution </h2>


<p><img class="left" src="http://farm5.staticflickr.com/4068/4317655660_61a60f6576_m.jpg">
File distribution was the next logical tactic. In this scheme, master copies of important configuration files are kept in a centralized location and distributed to machines. Distribution is handled in various ways. RDIST, NFS mounts, scp-on-a-for-loop, and rsync pulls are all popular methods.</p>

<p>This is nice for a lot of reasons. Centralization enables version control and reduces the time it takes to make changes across large groups of hosts. Like scripting, file distribution lowers the chance of human error by automating repetitive tasks.</p>

<p>However, these methods have their drawbacks. NFS mounts introduce single points of failure and brittleness. Push based methods miss hosts that happen to be down for maintenance. Pulling via rsync on a cron is better, but lacks the ability to notify services when files change.</p>

<p>Managing configs with packages falls into this category, and is attractive for a number of reasons. Packages can be written to take actions in their post-install sections, creating a way to restart services. It’s also pretty handy to be able to query package managers to see installed versions. However, you still need a way to manage config content, as well as initiate their installation in the first place.</p>

<h2> Declarative Syntax </h2>


<p><img class="right" src="http://farm4.staticflickr.com/3144/2591838509_1fdbc46db7_m.jpg">
In this scheme, autonomous agents run on hosts under management. The word autonomous is important, because it stresses that the <strong>machines manage themselves</strong> by interpreting policy remotely set by administrators. The policy could state any number of things about installed software and configuration files.</p>

<p>Policy written as code is run through an agent, letting the manipulation of packages, configuration files, and services all be handled by the same process. Brittle scripts behaving badly are eliminated by exploiting the idempotent nature of a declarative interface.</p>

<p>When first encountered, this is often perceived as overly complex and confusing by some administrators. I believe this is because they have equated the task of configuration management to file management for such a long time. After the initial learning curve and picking up some tools, management is dramatically simplified by allowing administrators to spend time focusing on policy definition rather than implementation.</p>

<h2> Configuration File Content Management </h2>


<p>This is where things get interesting. We have programs under our command running on every node in an infrastructure, so what should we make them to do concerning configuration files?</p>

<p>“Copy this file from its distribution point” is very common, since it allows for versioning of configuration files. Packaging configs also accomplishes this, and lets you make declarations about dependency. But how are the contents of the files determined?</p>

<p>It’s actually possible to do this by hand. Information can be gathered from wikis, spreadsheets, grey matter, and stick-it notes. Configuration files can then be assembled by engineers, distributed, and manually modified as an infrastructure changes.</p>

<p>File generation is a much better idea. Information about the nodes in an infrastructure can be encoded into a database, then fed into templates by small utility programs that handle various aspects of dependency analysis. When a change is made, such as adding or removing a node from a cluster, configurations concerning themselves with that cluster can be updated with ease.</p>

<h2> Local Configuration Generation </h2>


<p><img class="left" src="http://farm5.staticflickr.com/4140/4753170413_f3488f6586_m.jpg">
The logic that generates configuration files has to be executed somewhere. This is often done on the machine responsible for hosting the file distribution. A better place is directly on the nodes that need the configurations. This eliminates the need for distribution entirely.</p>

<p>Modifications to the node database now end up in all the correct places during the next agent run. Packaging the configs is completely unnecessary, since they don’t need to be moved from anywhere. Management complexity is reduced by eliminating the task entirely. Instead of worrying about file versioning, all that needs to be ensured is code correctness and the accuracy of the database.</p>

<p>Don’t edit config files. Instead, edit the truth.</p>

<p>-s</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Full stack Chef installers for EL5 and EL6]]></title>
    <link href="http://someara.github.com/post/2011/06/16/full-stack-chef-installers-for-el5-and-el6/"/>
    <updated>2011-06-16T12:24:00-04:00</updated>
    <id>http://someara.github.com/post/2011/06/16/full-stack-chef-installers-for-el5-and-el6</id>
    <content type="html"><![CDATA[<p>I started at Opscode this week, just in time for the Velocity Conference in Santa Clara. The amount of brain power in the building right now is absolutely astounding, and I’m having a total blast. Manning the Opscode booth in the exhibition hall, a number attendees have stopped by inquiring about when we’re going to improve Centos and Redhat support. So far, this has largely been a community effort, and the experience tends to lag behind that of Ubuntu users.</p>

<p>One thing coming down the pipe are full stack installers for various distributions. A full stack installer provides everything you need to run Chef, above libc. Telling people about this has generated a lot of excitement and interest, so I went ahead and built them for you, live from the floor of Velocity.</p>

<p>Below are instructions for manual installation on EL5 and EL6, clones and derivatives. I’ll leave the creation of a custom knife bootstrap script as an exercise for the reader.</p>

<p>Enjoy!</p>

<p>-s</p>

<h2> For EL5 users: </h2>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>curl http://rpm.aegisco.com/aegisco/el5/aegisco.repo &gt; /etc/yum.repos.d/aegisco.repo
</span><span class='line'>
</span><span class='line'>yum clean all ; yum install gecode
</span><span class='line'>
</span><span class='line'>wget http://yum.afistfulofservers.net/affs/fatty/el5/chef-full-0.10.0-1-centos-5.4-x86_64.sh
</span><span class='line'>
</span><span class='line'>chmod +x ./chef-full-0.10.0-1-centos-5.4-x86_64.sh
</span><span class='line'>
</span><span class='line'>sudo ./chef-full-0.10.0-1-centos-5.4-x86_64.sh
</span><span class='line'>
</span><span class='line'>sudo /opt/opscode/setup.s
</span></code></pre></td></tr></table></div></figure>




<h2> For EL6 users: </h2>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rpm -Uvh http://mirror.pnl.gov/epel/6/x86_64/epel-release-6-5.noarch.rpm
</span><span class='line'>
</span><span class='line'>rpm -Uvh http://yum.afistfulofservers.net/affs/centos/6/noarch/affs-release-el6-6-1.noarch.rpm
</span><span class='line'>
</span><span class='line'>yum clean all ; yum -y install gecode
</span><span class='line'>
</span><span class='line'>wget http://yum.afistfulofservers.net/affs/fatty/el6/chef-full-0.10.0-1-scientific-6.0-x86_64.sh
</span><span class='line'>
</span><span class='line'>chmod +x ./chef-full-0.10.0-1-scientific-6.0-x86_64.sh
</span><span class='line'>
</span><span class='line'>sudo ./chef-full-0.10.0-1-scientific-6.0-x86_64.sh
</span><span class='line'>
</span><span class='line'>sudo /opt/opscode/setup.sh
</span></code></pre></td></tr></table></div></figure>


<p>-s</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Searching Chef Server]]></title>
    <link href="http://someara.github.com/post/2011/04/07/searching-chef-server/"/>
    <updated>2011-04-07T12:15:00-04:00</updated>
    <id>http://someara.github.com/post/2011/04/07/searching-chef-server</id>
    <content type="html"><![CDATA[<h2> Overview </h2>


<p>Search is Chef’s killer feature for sure. Searching for the IPs or FQDNs of nodes with particular roles or attributes lets you dynamically string together machines within your infrastructure. This eliminates the need for centralized planning of IP addresses among Chef managed resources. This is especially useful on the clouds or in DHCP environments where you are assigned random IPs.</p>

<h2> Munin </h2>


<p>Munin is one of the first cookbooks that I read after finding out about Chef, and is pretty much responsible for selling me on it. Below are the recipes from a simplified version of the munin cookbook.</p>

<p>Munin is a system metrics collection tool that gives you a ton of information out of the box with very little configuration. It’s really great for smaller installations and a great way to get some metrics now if you’re in a hurry. The Opscode apache2 cookbook is included without modification to provide a web console for viewing graphs.</p>

<p>You can view the complete cookbook <a href=https://github.com/someara/affs-blog/tree/0.2.0/cookbooks/munin> here. </a></p>

<h2> Searching </h2>


<p>The cookbook is broken into two recipes, server.rb and client.rb</p>

<p>The server searches for clients to poll, and the client searches for servers to accept poll connections from. We start out by setting a node attribute in each recipe so the other half has something to search for.</p>

<p>The search syntax comes from Solr, so a node attribute set with node[:foo][:bar][:baz]=”buzz” is searched for with: search(:node, “foo_bar_baz:buzz”)</p>

<p>Searches return arrays of node objects (JSON blobs), which are then passed into templates where IP information is dug out and rendered into a config file.</p>

<h2> munin::server </h2>




<figure class='code'><figcaption><span>munin/recipes/server.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">node</span><span class="o">.</span><span class="n">set</span><span class="o">[</span><span class="ss">:munin</span><span class="o">][</span><span class="ss">:server</span><span class="o">]</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="n">munin_clients</span> <span class="o">=</span> <span class="n">search</span><span class="p">(</span><span class="ss">:node</span><span class="p">,</span> <span class="s2">&quot;munin_client:true&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">include_recipe</span> <span class="s2">&quot;apache2&quot;</span>
</span><span class='line'><span class="n">include_recipe</span> <span class="s2">&quot;apache2::mod_rewrite&quot;</span>
</span><span class='line'><span class="n">include_recipe</span> <span class="s2">&quot;munin::client&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">package</span> <span class="s2">&quot;munin&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">cookbook_file</span> <span class="s2">&quot;/etc/cron.d/munin&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;munin-cron&quot;</span>
</span><span class='line'>  <span class="n">mode</span> <span class="s2">&quot;0644&quot;</span>
</span><span class='line'>  <span class="n">owner</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'>  <span class="n">group</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">template</span> <span class="s2">&quot;/etc/munin/munin.conf&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;munin.conf.erb&quot;</span>
</span><span class='line'>  <span class="n">mode</span> <span class="mo">0644</span>
</span><span class='line'>  <span class="n">variables</span><span class="p">(</span><span class="ss">:munin_clients</span> <span class="o">=&gt;</span> <span class="n">munin_clients</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">apache_site</span> <span class="s2">&quot;000-default&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">enable</span> <span class="kp">false</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">node</span><span class="o">[</span><span class="ss">:platform</span><span class="o">]</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;fedora&quot;</span><span class="p">,</span> <span class="s2">&quot;redhat&quot;</span><span class="p">,</span> <span class="s2">&quot;centos&quot;</span><span class="p">,</span> <span class="s2">&quot;scientific&quot;</span>
</span><span class='line'>    <span class="n">file</span> <span class="s2">&quot;/var/www/html/munin/.htaccess&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">action</span> <span class="o">[</span><span class="ss">:delete</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">template</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:dir</span><span class="o">]</span><span class="si">}</span><span class="s2">/sites-available/munin.conf&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;localsystem.apache2.conf.erb&quot;</span>
</span><span class='line'>  <span class="n">mode</span> <span class="mo">0644</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">::</span><span class="no">File</span><span class="o">.</span><span class="n">symlink?</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:dir</span><span class="o">]</span><span class="si">}</span><span class="s2">/sites-enabled/munin.conf&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">notifies</span> <span class="ss">:reload</span><span class="p">,</span> <span class="n">resources</span><span class="p">(</span><span class="ss">:service</span> <span class="o">=&gt;</span> <span class="s2">&quot;apache2&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">apache_site</span> <span class="s2">&quot;munin.conf&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<h2> munin::client </h2>




<figure class='code'><figcaption><span>munin/recipes/client.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">node</span><span class="o">.</span><span class="n">set</span><span class="o">[</span><span class="ss">:munin</span><span class="o">][</span><span class="ss">:client</span><span class="o">]</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="n">munin_servers</span> <span class="o">=</span> <span class="n">search</span><span class="p">(</span><span class="ss">:node</span><span class="p">,</span> <span class="s2">&quot;munin_server:true&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">unless</span> <span class="n">munin_servers</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>  <span class="n">package</span> <span class="s2">&quot;munin-node&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">action</span> <span class="ss">:install</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">template</span> <span class="s2">&quot;/etc/munin/munin-node.conf&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">source</span> <span class="s2">&quot;munin-node.conf.erb&quot;</span>
</span><span class='line'>    <span class="n">mode</span> <span class="mo">0644</span>
</span><span class='line'>    <span class="n">variables</span> <span class="ss">:munin_servers</span> <span class="o">=&gt;</span> <span class="n">munin_servers</span>
</span><span class='line'>    <span class="n">notifies</span> <span class="ss">:restart</span><span class="p">,</span> <span class="s2">&quot;service[munin-node]&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">service</span> <span class="s2">&quot;munin-node&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">supports</span> <span class="ss">:restart</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>    <span class="n">action</span> <span class="o">[</span> <span class="ss">:enable</span><span class="p">,</span> <span class="ss">:start</span> <span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<h2> Roles vs Attributes </h2>


<p>A number of people have asked me why I used attributes rather than roles. This is to avoid baking convention into the recipe code, which I like to do whenever I can help it.</p>

<p>Consider the following scenario:</p>

<p>You have a role[monitoring], that includes recipe[nagios::server] and recipe[munin::server]. In the Nagios and Munin client cookbooks, you’ve searched for the role[monitoring] are happily populating your configuration files. A few months pass, and you’ve added more machines to your infrastructure.</p>

<p>One day your monitoring server starts crawling, since it has slow disks and can’t keep up with the IO intensive graph generation. You decide that “monitoring” is an overloaded term, and set off to split your metrics and alerting onto different machines. You edit your role structure and change your node object’s runlist assignment, and bring up some new machines. However, you still have more work to do. Now you have to go into the recipe code and change them to search for their new roles.</p>

<p>Using attributes as above frees you from having to modify the recipe code when editing role definitions. Don’t get me wrong, there are plenty of scenarios where roles are preferable to attributes, but for things like this, I like to avoid them.</p>

<p>-s</p>

<p><em>update</em> A reader has pointed out that instead of using attributes, I could have used the search syntax search(:node, ‘recipes:”munin::server”’). Good to know!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Brief Chef Tutorial (from concentrate)]]></title>
    <link href="http://someara.github.com/post/2011/03/16/a-brief-chef-tutorial-from-concentrate/"/>
    <updated>2011-03-16T15:18:00-04:00</updated>
    <id>http://someara.github.com/post/2011/03/16/a-brief-chef-tutorial-from-concentrate</id>
    <content type="html"><![CDATA[<h2> Overview </h2>


<p></p>

<p>Chef is configuration management platform written in Ruby. Configuration management is a large topic that most systems administrators and IT management are just now starting to gain experience with. Historically, infrastructures have been maintained either by hand, with structured scripting, by imagine cloning, or a combination of those. Chef’s usage model rejects the idea of cloning and maintaining “golden images”. Instead, the idea is to start with an embryonic image and grow it into it’s desired state. This works much better as infrastructure complexity increases, and eliminates the problem of image sprawl. The convergent nature of the tool allows you to change the infrastructure over time without much fuss. Chef allows you to express your infrastructure as code, which lets you store it in version control.</p>

<p>“A Can of Condensed Chef Documentation” is available <a href=/post/2011/03/15/a-can-of-condensed-chef-documentation/> here </a></p>

<h2> Prerequisites </h2>




<h3> Git </h3>


<p>Actually you can use any SCM, but git is the most widely adopted in the Chef community. All Chef Git repos begin their lives as clones of the Opscode chef-repo, found here: https://github.com/opscode/chef-repo There is a nice overview of the repo structure (cookbooks, databags, roles, etc) in the README.</p>

<h3> chef-server up and running at a known IP or FQDN. </h3>


<p>This is easily installed from packages by following the instructions on the opscode wiki. The process amounts to “add a package repository, install the packages, and turn it on” Alternatively, you could use the Opscode Platform and go dancing with space robots.</p>

<h3> Knife installed on your local system </h3>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>gem install chef net-ssh net-ssh-multi fog highline
</span></code></pre></td></tr></table></div></figure>




<h3> Chef git repo checked out on local file system </h3>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clone https://github.com/opscode/chef-repo
</span></code></pre></td></tr></table></div></figure>




<h3> Client certificate creation </h3>


<p>A “client” in chef parlance is an SSL certificate used to access the chef-server API. If the client’s CN name is marked “admin” in chef-server, the client can perform restricted operations such as creating and deleting nodes. This is the kind of client needed by knife to manipulate the infrastructure, and normally correspond to actual human being, but by no means has to. Nodes have non-admin client certificates, and can only manipulate their own node objects. To create a client certificate, you’ll need to log into the chef-server webui, click on “clients”, think of a name for it (I use someara), and paste the displayed private key into a local file.</p>

<p><strong> Copy the validation key </strong><br>
The validation key is a special key that is shared by all freshly bootstrapped nodes. It has the ability to create new client certificates and nodes objects through the API.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>scp root@chefserver:/etc/chef/validation.pem .chef/
</span></code></pre></td></tr></table></div></figure>




<h3> Edit configuration files </h3>


<p>For more details on this section, please visit http://wiki.opscode.com/display/chef/Chef+Configuration+Settings</p>

<p>.chef/client.rb - This file is copied onto the nodes that are bootstrapped with knife, and needs to be configured to point to the IP or FQDN of your chef server</p>

<p>example</p>

<figure class='code'><figcaption><span>$ vim client.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">log_level</span>          <span class="ss">:info</span>
</span><span class='line'><span class="n">log_location</span>       <span class="no">STDOUT</span>
</span><span class='line'><span class="n">ssl_verify_mode</span>    <span class="ss">:verify_none</span>
</span><span class='line'><span class="n">chef_server_url</span>    <span class="s2">&quot;http://y.t.b.d:4000&quot;</span>
</span><span class='line'><span class="n">file_cache_path</span>    <span class="s2">&quot;/var/cache/chef&quot;</span>
</span><span class='line'><span class="n">pid_file</span>           <span class="s2">&quot;/var/run/chef/client.pid&quot;</span>
</span><span class='line'><span class="n">cache_options</span><span class="p">({</span> <span class="ss">:path</span> <span class="o">=&gt;</span> <span class="s2">&quot;/var/cache/chef/checksums&quot;</span><span class="p">,</span> <span class="ss">:skip_expires</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">})</span>
</span><span class='line'><span class="n">signing_ca_user</span> <span class="s2">&quot;chef&quot;</span>
</span><span class='line'><span class="no">Mixlib</span><span class="o">::</span><span class="no">Log</span><span class="o">::</span><span class="no">Formatter</span><span class="o">.</span><span class="n">show_time</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="n">validation_client_name</span> <span class="s2">&quot;chef-validator&quot;</span>
</span><span class='line'><span class="n">validation_key</span>         <span class="s2">&quot;/etc/chef/validation.pem&quot;</span>
</span><span class='line'><span class="n">client_key</span>             <span class="s2">&quot;/etc/chef/client.pem&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>.chef/knife.rb - This file also needs to be configured to point to your chef-server, and also to the client private key that was created earlier.</p>

<p>example</p>

<figure class='code'><figcaption><span>$ vim knife.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">log_level</span>            <span class="ss">:info</span>
</span><span class='line'><span class="n">log_location</span>         <span class="no">STDOUT</span>
</span><span class='line'><span class="n">node_name</span>           <span class="s1">&#39;knife&#39;</span>
</span><span class='line'><span class="n">cache_type</span>          <span class="s1">&#39;BasicFile&#39;</span>
</span><span class='line'><span class="n">cache_options</span><span class="p">(</span> <span class="ss">:path</span> <span class="o">=&gt;</span> <span class="s2">&quot;~/.chef/checksums&quot;</span> <span class="p">)</span>
</span><span class='line'><span class="n">client_key</span>       <span class="s1">&#39;~/.chef/knife.key.pem&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">cookbook_path</span>       <span class="o">[</span> <span class="s2">&quot;~/mychefrepo/cookbooks&quot;</span> <span class="o">]</span>
</span><span class='line'><span class="n">cookbook_copyright</span> <span class="s2">&quot;example org&quot;</span>
</span><span class='line'><span class="n">cookbook_email</span>     <span class="s2">&quot;cookbooks@example.net&quot;</span>
</span><span class='line'><span class="n">cookbook_license</span>   <span class="s2">&quot;apachev2&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">chef_server_url</span>    <span class="s2">&quot;http://y.t.b.d:4000&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">validation_key</span>      <span class="s2">&quot;~/.chef/validation.pem&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># rackspacecloud</span>
</span><span class='line'><span class="n">knife</span><span class="o">[</span><span class="ss">:rackspace_api_key</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;00000000000000000000000000000000&#39;</span>
</span><span class='line'><span class="n">knife</span><span class="o">[</span><span class="ss">:rackspace_username</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;rackspace&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># slicehost</span>
</span><span class='line'><span class="n">knife</span><span class="o">[</span><span class="ss">:slicehost_password</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;0000000000000000000000000000000000000000000000000000000000000000&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># AFFS aws</span>
</span><span class='line'><span class="n">knife</span><span class="o">[</span><span class="ss">:aws_access_key_id</span><span class="o">]</span>     <span class="o">=</span> <span class="s1">&#39;00000000000000000000&#39;</span>
</span><span class='line'><span class="n">knife</span><span class="o">[</span><span class="ss">:aws_secret_access_key</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;0000000000000000000000000000000000000000&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#knife[:region]  = &quot;us-east-1&quot;</span>
</span><span class='line'><span class="c1">#knife[:availability_zone] = &quot;us-west-1b&quot;</span>
</span><span class='line'><span class="c1">#knife[:ssh_user] = &quot;root&quot;</span>
</span><span class='line'><span class="c1">#knife[:flavor] = &quot;t1.micro&quot;</span>
</span><span class='line'><span class="c1">#knife[:image] = &quot;ami-10a55279&quot;</span>
</span><span class='line'><span class="c1">#knife[:use_sudo]  = &quot;false&quot;</span>
</span><span class='line'><span class="c1">#knife[:distro] = &quot;affs-fc13&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<h2> Role, recipes, and run lists</h2>


<p>As mentioned earlier, run lists are made up from role trees. Here is an example of how you would create a demo server with a correct clock, managed users, and metrics and monitoring capabilities. In this example, six recipes are executed per run, and an unknown number of resources are managed. (To figure that out, you’d have to read the recipes)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>role[demo]
</span><span class='line'>  role[base]                   &lt;---- nested role
</span><span class='line'>  recipe[foo::server]
</span><span class='line'>  recipe[foo::muninplugin]
</span><span class='line'>       
</span><span class='line'>role[base]
</span><span class='line'>  recipe[ntp]
</span><span class='line'>  recipe[localusers::common]
</span><span class='line'>  recipe[munin::client]
</span><span class='line'>  recipe[nagios::client]
</span><span class='line'>
</span><span class='line'>expanded run list
</span><span class='line'>  recipe[ntp]
</span><span class='line'>    recipe[localusers::common]
</span><span class='line'>    recipe[munin::client]
</span><span class='line'>    recipe[nagios::client]
</span><span class='line'>    recipe[foo::server]
</span><span class='line'>    recipe[foo::muninplugin]</span></code></pre></td></tr></table></div></figure>


<p>That’s quite a bit of cooking for a beginner tutorial, so we’re just going to focus on a single node running an NTP client for now. Roles can be written either as .rb files or .json files. I prefer to use the .rb format because they’re easier to read and write. Some people prefer to deal with the JSON formatted version directly, since thats the way they’re dumped with knife. At the end of the day, it doesn’t really matter, so do which ever makes you happy.</p>

<h3> Step One : Creating a demo role file </h3>




<figure class='code'><figcaption><span>$ vim roles/demo.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">name</span> <span class="s2">&quot;demo&quot;</span>
</span><span class='line'><span class="n">description</span> <span class="s2">&quot;demo role&quot;</span>
</span><span class='line'><span class="n">run_list</span> <span class="o">[</span>
</span><span class='line'>    <span class="s2">&quot;recipe[ntp]&quot;</span>
</span><span class='line'>    <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<h3> Step Two : Installing the role on chef-server </h3>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>knife role from file roles/demo.rb
</span></code></pre></td></tr></table></div></figure>




<h2> Writing Recipes </h2>


<h3> Hello, NTP! </h3>


<p>A machine’s NTP client is simple to install and configure. Every systems administrator is already familiar with it, which makes it a great example.</p>

<p>Most software available as a native package in a given linux distribution can be managed with a “package, template, service” design pattern.</p>

<p>Each of those words refers to a Chef resource, which we pass arguments to.</p>

<h3> Step One : Creating an ntp cookbook </h3>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>knife cookbook create ntp
</span></code></pre></td></tr></table></div></figure>


<p>This creates a directory structure for the ntp cookbook. You can check it out with ls:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ls -la cookbooks/ntp/
</span><span class='line'>total 24
</span><span class='line'>drwxr-xr-x  13 someara  staff   442 Mar 14 17:56 .
</span><span class='line'>drwxr-xr-x  36 someara  staff  1224 Mar 15 19:39 ..
</span><span class='line'>-rw-r--r--   1 someara  staff    58 Mar 14 17:56 README.rdoc
</span><span class='line'>drwxr-xr-x   2 someara  staff    68 Mar 14 17:56 attributes
</span><span class='line'>drwxr-xr-x   2 someara  staff    68 Mar 14 17:56 definitions
</span><span class='line'>drwxr-xr-x   3 someara  staff   102 Mar 14 17:56 files
</span><span class='line'>drwxr-xr-x   2 someara  staff    68 Mar 14 17:56 libraries
</span><span class='line'>-rw-r--r--   1 someara  staff   259 Mar 14 17:56 metadata.rb
</span><span class='line'>drwxr-xr-x   2 someara  staff    68 Mar 14 17:56 providers
</span><span class='line'>drwxr-xr-x   4 someara  staff   136 Mar 14 17:56 recipes
</span><span class='line'>drwxr-xr-x   2 someara  staff    68 Mar 14 17:56 resources
</span><span class='line'>drwxr-xr-x   3 someara  staff   102 Mar 14 17:56 templates
</span></code></pre></td></tr></table></div></figure>




<h3> Step Two : Deciding what to name the recipe </h3>


<p>Recipe names are related to cookbook structure. Putting recipe[foo::bar] in a node’s run list results in cookbooks/foo/recipes/bar.rb being downloaded from chef-server and executed.</p>

<p>There is a special recipe in every cookbook called default.rb. It is executed by every recipe in the cookbook. Specifying recipe[foo::bar] actually results in cookbooks/foo/recipes/default.rb, as well as cookbooks/foo/recipes/bar.rb being executed.</p>

<p>Default.rb is a good place to put common stuff when writing cookbooks with multiple recipes, but we’re going to keep it simple and just use default.rb for everything.</p>

<h3> Step Three : Creating a recipe </h3>


<p>This is where all the fun stuff happens. When using resources, you’re writing things in a declarative fashion. Declarative means you can concentrate on the WHAT without having to worry about the HOW. Chef will take care of that for you with something called a resource provider. When installing a package, it will check to see what your operating system is and use the appropriate methodology. For example, on Debian based systems, it will use apt-get, and on Redhat based systems, it will use yum.</p>

<figure class='code'><figcaption><span>$ vim cookbooks/ntp/recipes/default.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">package</span> <span class="s2">&quot;ntp&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">action</span> <span class="o">[</span><span class="ss">:install</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">template</span> <span class="s2">&quot;/etc/ntp.conf&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;ntp.conf.erb&quot;</span>
</span><span class='line'>  <span class="n">variables</span><span class="p">(</span> <span class="ss">:ntp_server</span> <span class="o">=&gt;</span> <span class="s2">&quot;time.nist.gov&quot;</span> <span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">service</span> <span class="s2">&quot;ntpd&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">action</span><span class="o">[</span><span class="ss">:enable</span><span class="p">,</span><span class="ss">:start</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Chef recipes are evaluated top down (like a normal ruby program), with each resource being ran in the order it appears. Order is important. In the above example, if we were to reverse the order of those three resources, it would first fail to start the service (as the software is not installed yet), then write the configuration file, then finally clobber the file it just wrote by installing the package.</p>

<h3> Step Four : Creating the ntp.conf.erb template </h3>




<figure class='code'><figcaption><span>$ vim cookbooks/ntp/templates/default/ntp.conf.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x"># generated by Chef.</span>
</span><span class='line'><span class="x">restrict default kod nomodify notrap nopeer noquery</span>
</span><span class='line'><span class="x">restrict -6 default kod nomodify notrap nopeer noquery</span>
</span><span class='line'><span class="x">restrict 127.0.0.1</span>
</span><span class='line'><span class="x">restrict -6 ::1</span>
</span><span class='line'><span class="x">server </span><span class="cp">&lt;%=</span> <span class="vi">@ntp_server</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">server  127.127.1.0     # local clock</span>
</span><span class='line'><span class="x">driftfile /var/lib/ntp/drift</span>
</span><span class='line'><span class="x">keys /etc/ntp/keys</span>
</span></code></pre></td></tr></table></div></figure>




<h3> Step Five : uploading the cookbook to chef-server </h3>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>knife cookbook upload ntp
</span></code></pre></td></tr></table></div></figure>




<h2> Bootstraping nodes </h2>


<p>The chef-client needs to somehow get itself installed and running on managed nodes. This process is known as bootstrapping and is accomplished with shell scripting. The method of bootstrap will vary depending on how you go about provisioning your server, and the script will depend on the platform.</p>

<h3> Clouds </h3>


<p>Cloud providers like AWS and Rackspace will let you make an API request, then return the IP of your compute resource.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>knife ec2 server create <span class="s2">&quot;role[demo]&quot;</span> -N <span class="s2">&quot;demo.example.net&quot;</span> -i ami-3e02f257
</span></code></pre></td></tr></table></div></figure>


<p>In this example, knife uses the ruby fog library to talk to ec2 and request a server with an argument of the desired AMI. Knife then uses net-ssh-multi to ssh into the machine and execute a bootstrapping script. There are a number of other arguments that can be passed to knife, such as ec2 region, machine size, what ssh key to use. You can read all about them on the Opscode wiki.</p>

<h3> Meatclouds </h3>


<p>If your method of provisioning servers is “ask your VMware administrator” or “fill out these forms”, then you’ll probably bootstrap via an IP address.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>knife boostrap 10.0.0.5 -x root -N demo.example.net -r <span class="s1">&#39;role[demo]&#39;</span> -d pp-centos5
</span></code></pre></td></tr></table></div></figure>




<h3> Cobbler / FAI / pxe_dust / Jumpstart / etc </h3>


<p>In these provisioning scenarios, you can skip knife completely and put the contents of a bootstrap script kickstart or equivalent.</p>

<h2> Customizing the bootstrap </h2>


<p>By default (with no arguments), Chef attempts a gem based installation meant to work on Ubuntu. If you’re not using Ubuntu, or are uncomfortable installing gems directly from rubygems.org, you’ll have to change the script to suite your taste. It works by specifying a template name with the -d flag, SSH’ing into the machine and running the rendered script. When using knife to SSH, make sure you have the correct key loaded into your ssh-agent.</p>

<h3> Example </h3>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>knife boostrap 10.0.0.5 -x root -N demo.example.net -r ‘role<span class="o">[</span>demo<span class="o">]</span>’ -d my-centos5
</span></code></pre></td></tr></table></div></figure>


<p>ends up running this</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ssh root@10.0.0.179 bash -c ‘&lt;contents of rendered .chef/bootstrap/my-centos5.erb template&gt;’
</span></code></pre></td></tr></table></div></figure>


<p>What I do in my boot scripts:</p>

<ul>
<li>Correctly set the hostname to value of -N argument. (By correctly, I mean that <code>hostname -f</code> has to work properly)</li>
<li>Configure the package repositories</li>
<li>Install Chef. I like packages using the native package manager</li>
<li>Copy the validation key</li>
<li>Write /etc/chef/client.rb (points to server)</li>
<li>Write a json file with the contents of the -r argument</li>
<li>chef-client -j bootstrap.json</li>
</ul>


<p>After the script is ran, chef-client does the following</p>

<ul>
<li>Ohai!</li>
<li>Client registration: SSL CN is FQDN from ohai</li>
<li>Node creation: Node name is also FQDN from ohai, run lists are from JSON</li>
<li>Expands run list</li>
<li>Downloads needed cookbooks</li>
<li>Starts executing recipes</li>
</ul>


<p>There is an example of a custom bootstrap script <a href=https://github.com/someara/affs-blog/blob/v1/.chef/bootstrap/affs-fc13.erb> here </a></p>

<p>At this point, you should have an ntp client installed, configured, and running.</p>

<p>(It’s actually a little bit more complicated than that. For more information about chef-client runs, see <a href=http://wiki.opscode.com/display/chef/Anatomy+of+a+Chef+Run> http://wiki.opscode.com/display/chef/Anatomy+of+a+Chef+Run </a>)</p>

<h2> Databag Driven Recipes </h2>


<p>Data driven infrastructures are all the rage these days. This allows you to do things like change the NTP server all your nodes use by editing a single JSON value in chef-server. You can get really creative with this, so let your imagination run wild.</p>

<h3> Step One : Create an ntp data bag </h3>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>knife data bag create ntp
</span><span class='line'><span class="nv">$ </span>mkdir -p data_bags/ntp
</span><span class='line'><span class="nv">$ </span>vim data_bags/ntp/default_server.json
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;id&quot;</span> : <span class="s2">&quot;default_server&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;value&quot;</span> : <span class="s2">&quot;us.pool.ntp.org&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<h3> Step Two : Upload data bag to chef-server </h3>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>knife data bag from file ntp data_bags/ntp/default_server.json
</span></code></pre></td></tr></table></div></figure>




<h3> Step Three : Modify the recipe to take advantage of it </h3>




<figure class='code'><figcaption><span>ntp/recipes/default.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">package</span> <span class="s2">&quot;ntp&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">action</span> <span class="o">[</span><span class="ss">:install</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">ntp_server</span> <span class="o">=</span> <span class="n">data_bag_item</span><span class="p">(</span><span class="s1">&#39;ntp&#39;</span><span class="p">,</span> <span class="s1">&#39;default_server&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">template</span> <span class="s2">&quot;/etc/ntp.conf&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;ntp.conf.erb&quot;</span>
</span><span class='line'>  <span class="n">variables</span><span class="p">(</span> <span class="ss">:ntp_server</span> <span class="o">=&gt;</span> <span class="n">ntp_server</span><span class="o">[</span><span class="s1">&#39;value&#39;</span><span class="o">]</span> <span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">service</span> <span class="s2">&quot;ntpd&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">action</span><span class="o">[</span><span class="ss">:enable</span><span class="p">,</span><span class="ss">:start</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also access data bag data through the search() interface, which you can read about on the opscode wiki.</p>

<h3>Step Four : uploading the cookbook to chef-server</h3>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>knife cookbook upload ntp
</span></code></pre></td></tr></table></div></figure>




<h2> Understanding Idempotence and Convergence </h2>


<p>We’re not quite done yet. Let’s SSH into our shiny new NTP enabled machine and go poking about.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>grep server /etc/ntp.conf | head -n 1
</span><span class='line'>server time.nist.gov
</span></code></pre></td></tr></table></div></figure>


<p>Wait a sec, isn’t that supposed to be “us.pool.ntp.org”? Not yet. We haven’t enabled our convergence mechanism yet! If we manually run chef-client on the node, we will indeed see that the file has changed.</p>

<h3> Convergence </h3>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># chef-client</span>
</span><span class='line'><span class="nv">$ </span>grep server /etc/ntp.conf | head -n 1
</span><span class='line'>us.pool.ntp.org
</span></code></pre></td></tr></table></div></figure>


<p>That file just converged into the correct state. Lets edit the file again, this time filling it with complete garbage.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># dd if=/dev/urandom of=/etc/ntp.conf bs=128 count=1</span>
</span><span class='line'><span class="c"># chef-client</span>
</span><span class='line'><span class="nv">$ </span>grep server /etc/ntp.conf | head -n 1
</span><span class='line'>us.pool.ntp.org
</span></code></pre></td></tr></table></div></figure>


<p>Again, the file converged into the correct state. Awesome. Running chef-client by hand on a large cluster of nodes would be a real pain, so it makes sense to set it up automatically. Indeed, often found in a “role[base]” is a “recipe[chef-client]” that configures it to run as a daemon, or from a cron.</p>

<h3> Idempotence </h3>


<p>It is safe to run the recipes on the nodes time and time again because resources are written to be idempotent. You may remember from math class that a function f is idempotent if, for all values of x, f(f(x))=f(x). That means you can run a function over a resource a bajillion times and it will behave as if it was only done once.</p>

<p>This is implemented under the hood as “If it ain’t broke, don’t fix it.” In a file resource, checksums are calculated and compared. In a package resource, the rpm or dpkg databases are consulted to see if the package is installed. The effect of this is that most chef-client runs do absolutely nothing to resources. That is, until you change the function by altering the inputs to the resource providers.</p>

<h2> Notifications and Subscriptions </h2>


<p>Further examination reveals that the ntpd service is still talking to “time.nist.gov”. This is because during the chef-client run, the resource named “ntpd” ran it’s idempotency check, and found that it was, in fact, running. It therefore did nothing. It we want ntpd to restart when the contents /etc/ntp.conf are altered, we have to modify our recipe to set up that relation.</p>

<figure class='code'><figcaption><span>ntp/recipes/default.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">package</span> <span class="s2">&quot;ntp&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">action</span> <span class="o">[</span><span class="ss">:install</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">ntp_server</span> <span class="o">=</span> <span class="n">data_bag_item</span><span class="p">(</span><span class="s1">&#39;ntp&#39;</span><span class="p">,</span> <span class="s1">&#39;default_server&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">template</span> <span class="s2">&quot;/etc/ntp.conf&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;ntp.conf.erb&quot;</span>
</span><span class='line'>  <span class="n">variables</span><span class="p">(</span> <span class="ss">:ntp_server</span> <span class="o">=&gt;</span> <span class="n">ntp_server</span><span class="o">[</span><span class="s1">&#39;value&#39;</span><span class="o">]</span> <span class="p">)</span>
</span><span class='line'>  <span class="n">notifies</span> <span class="ss">:restart</span><span class="p">,</span> <span class="s2">&quot;service[ntpd]&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">service</span> <span class="s2">&quot;ntpd&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">action</span><span class="o">[</span><span class="ss">:enable</span><span class="p">,</span><span class="ss">:start</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alternatively, we could have set up the “service[ntpd]” resource to subscribe to the “template[/etc/ntp.conf]” resource.</p>

<p>Upload the modified ntp cookbook to chef-server and re-run the client on your demo server to check your work.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># chef-client</span>
</span><span class='line'><span class="nv">$ </span>lsof -i | grep ntp | grep pool
</span><span class='line'>ntpd       5673    ntp   19u  IPv4 12481380      0t0  UDP us.pool.ntp.org:ntp<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Winning.</p>

<h2> Bulk Loading data into chef-server </h2>


<p>To save yourself from writing crazy for loops on command line like</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">for </span>i in <span class="sb">`</span>ls cookbooks<span class="sb">`</span> ; <span class="k">do </span>knife cookbook upload <span class="nv">$i</span> ; <span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or even worse,</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">for </span>i in <span class="sb">`</span>ls data_bags<span class="sb">`</span> ; <span class="k">do </span>
</span><span class='line'><span class="k">  for </span>j in <span class="sb">`</span>ls data_bags/<span class="nv">$i</span>/<span class="sb">`</span>; <span class="k">do</span>
</span><span class='line'><span class="k">    </span>knife data bag create <span class="nv">$i</span>
</span><span class='line'>    knife data bag from file <span class="nv">$i</span> data_bags/<span class="nv">$i</span>/<span class="nv">$j</span> ;
</span><span class='line'>  <span class="k">done</span> ;
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>&#8230; somebody was nice enough to write some rake tasks. List them with rake -T, and then install your repo in chef-server with &#8220;rake install&#8221;</p>

<h2> Viewing your Infrastructure </h2>


<p>There are two ways to view your infrastructure. The first is through the management console, and the other is from knife. Here is a list of handy commands to get you started.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>knife node list
</span><span class='line'>knife node show foo.example.net
</span><span class='line'>knife data bag list
</span><span class='line'>knife data bag show whatever
</span></code></pre></td></tr></table></div></figure>




<h2> Deleting Clients, Nodes, and Machines </h2>


<p>Remember that nodes, their client certificates, and the machines they’re associated with are three separate entities.</p>

<h3> Nodes </h3>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>knife node delete foo.example.net
</span></code></pre></td></tr></table></div></figure>


<p>This just deletes the node object from chef-server. The next time the machine runs chef-client, the node object will be recreated in chef-server. This node object will have an empty run list what will have to be repopulated before chef-client actually does anything.</p>

<h3> Clients </h3>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>knife client delete foo.example.net
</span></code></pre></td></tr></table></div></figure>


<p>This deletes a node object’s associated public key from chef-server. The next time the machine runs chef-client, it will get a permission denied error. If this is done on accident, ssh into the machine, delete it’s client key at /etc/chef/client.pem and re-run chef-client.</p>

<h3> Machines </h3>


<p>Deleting a machine will be specific to how it was provisioned. On AWS, it would look like “knife ec2 server delete i-DEAFBEEF”. On a VMware cluster, it could be by clicking buttons in a GUI. I once deleted a hardware machine by throwing it off a balcony. YMMV.</p>

<h2> nodes.sh </h2>


<p>I like to keep a special directory called “infrastructures” that contain sub-directories and nodes.sh files. A nodes.sh contains a list of knife commands that can be thought of as the highest level view of the infrastructure. for example:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>knife bootstrap 10.0.0.10 -r <span class="s1">&#39;role[database]&#39;</span>  -N database-01.example.net -x root -d my-fedora13
</span><span class='line'>knife bootstrap 10.0.0.11 -r <span class="s1">&#39;role[database]&#39;</span> -N database-02.example.net -x root -d my-fedora13
</span><span class='line'>knife bootstrap 10.0.0.14 -r <span class="s1">&#39;role[redis]&#39;</span> -N redis01.example.net -x root -d my-fedora13
</span><span class='line'>knife bootstrap 10.0.0.15 -r <span class="s1">&#39;role[redis]&#39;</span> -N redis02.example.net -x root -d my-fedora13
</span><span class='line'>knife bootstrap 10.0.0.14 -r <span class="s1">&#39;role[files]&#39;</span> -N files01.example.net -x root -d my-fedora13
</span><span class='line'>knife bootstrap 10.0.0.15 -r <span class="s1">&#39;role[files]&#39;</span> -N files02.example.net -x root -d my-fedora13
</span><span class='line'>knife bootstrap 10.0.0.16 -r <span class="s1">&#39;role[appdemo]&#39;</span> -N appdemo01.example.net -x root -d my-fedora13
</span><span class='line'>knife bootstrap 10.0.0.17 -r <span class="s1">&#39;role[appdemo]&#39;</span> -N appdemo02.example.net -x root -d my-fedora13
</span></code></pre></td></tr></table></div></figure>


<p>This file can eventually be used to bring up entire infrastructures, but during development, lines are typically pasted into a terminal individually.</p>

<p>This is as close as I’ve gotten to replacing myself with a very small shell script so far. Many a sysadmin has been pursuing this for a long time now. It is here. The journey has just begun.</p>

<p>-s</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Can of Condensed Chef Documentation]]></title>
    <link href="http://someara.github.com/post/2011/03/15/a-can-of-condensed-chef-documentation/"/>
    <updated>2011-03-15T14:34:00-04:00</updated>
    <id>http://someara.github.com/post/2011/03/15/a-can-of-condensed-chef-documentation</id>
    <content type="html"><![CDATA[<h2>
Overview
</h2>


<p>Chef’s documentation is vast and broken up into many pages on the Opscode wiki. The goal here is to index this information and give a brief explanation of each topic without going into too much depth.</p>

<h2>
Architecture
</h2>


<p><a href= http://wiki.opscode.com/display/chef/Architecture> http://wiki.opscode.com/display/chef/Architecture </a></p>

<p>Chef is a configuration management platform in the same class of tools as Cfengine, Bcfg2, and Puppet. The idea is to define policy at a centralized, version controlled place, and then have the machines under management pull down their policy and converge onto that state at regular intervals. This gives you a single point of administration allowing for easier change management and disaster recovery. Combined with a compute resource provisioning layer (such as knife’s ability to manipulate EC2 or Rackspace servers), entire complex infrastructures can pop into existence in minutes.</p>

<h2>
Chef Server
</h2>


<p><a href=http://wiki.opscode.com/display/chef/Chef+Server> http://wiki.opscode.com/display/chef/Chef+Server </a></p>

<p>Chef server has various components under the hood. Assorted information (cookbooks, databags, client certificates, and node objects), are stored in CouchDB as JSON blobs. CouchDB is indexed by chef-solr-indexer. RabbitMQ sits between the data store and A RESTful API service that exposes all this to the network as chef-server. If you don’t want to run chef-server yourself, Opscode will do it for you for with their Platform service for a meager $5/node/month. The management console is really handy during development, since it provides a nice way to examine JSON data. However, it should be noted that real chefs value knife techniques.</p>

<h2>
Clients
</h2>


<p><a href=http://wiki.opscode.com/display/chef/API+Clients> http://wiki.opscode.com/display/chef/Api+Clients </a></p>

<p>In Chef, the term “client” refers to an SSL certificate for an API user of chef-server. This is often a point of confusion, and should not be confused with chef-client. Most of the time, one machine has one client certificate, which corresponds to one node object.</p>

<h2>
Nodes
</h2>


<p><a href=http://wiki.opscode.com/display/chef/Nodes> http://wiki.opscode.com/display/chef/Nodes </a></p>

<p>Nodes are JSON representations of machines under Chef management. They live in chef-server. They contain two important things: The node’s run list, and a collection of attributes. The run list is a collection of recipes names that will be ran on the machine when chef-client is invoked. Attributes are various facts about the node, which can be manipulated either by hand, or from recipes.</p>

<h2>
Attributes
</h2>


<p><a href=http://wiki.opscode.com/display/chef/Attributes> http://wiki.opscode.com/display/chef/Attributes </a></p>

<p>Attributes are arbitrary values set in a node object. Ohai provides a lot of informational attributes about the node, and arbitrary attributes can be set by the line cooks. They can be set from recipes or roles, and have a precedence system that allow you to override them. Examples of arbitrary attributes are listen ports for network services, or the names of a package on a particular linux distribution (httpd vs apache2).</p>

<h2>
Ohai
</h2>


<p><a href=http://wiki.opscode.com/display/chef/Ohai> http://wiki.opscode.com/display/chef/Ohai </a></p>

<p>Ohai is the Chef equivilent of Cfengine’s cf-know and Puppet’s facter. When invoked, it collects a bunch of information about the machine its running on, including Chef related stuff, hostname, FQDN, networking, memory, cpu, platform, and kernel data. This information is then output as JSON and used to update the node object on chef-server. It is possible to write custom Ohai plugins, if your’re interested in something not dug up by default.</p>

<h2>
Chef Client
</h2>


<p><a href=http://wiki.opscode.com/display/chef/Chef+Client> http://wiki.opscode.com/display/chef/Chef+Client </a></p>

<p>Managed nodes run an agent called chef-client at regular intervals. This agent can be ran as a daemon or invoked from cron. The agent pulls down policy from chef-server and converges the system to the described state. This lets you introduce changes to machines in your infrastructure by manipulating data in chef-server. The pull (vs push) technique ensures machines that are down for maintenance end up the proper state when turned back on.</p>

<h2>
Resources
</h2>


<p><a href=http://wiki.opscode.com/display/chef/Resources > http://wiki.opscode.com/display/chef/Resources </a></p>

<p>Resources are the basic configuration items that are manipulated by Chef recipes. Resources make up the Chef DSL by providing a declarative interface to objects on the machine. Examples of core resources include files, directories, users and groups, links, packages, and services.</p>

<h2>
Recipes
</h2>


<p><a href=http://wiki.opscode.com/display/chef/Recipes > http://wiki.opscode.com/display/chef/Recipes </a></p>

<p>Recipes contain the actual code that gets ran on machines by chef-client. Recipes can be made up entirely of declarative resources statements, but rarely are. The real power of Chef stems from a recipes’s ability to search chef-server for information. Recipes can say “give me a list of all the hostnames of my web servers”, and then generate the configuration file for your load balancer. Another recipe might say “give me a list of all my database servers”, so it can configure Nagios to monitor them.</p>

<h2>
Cookbooks
</h2>


<p><a href=http://wiki.opscode.com/display/chef/Cookbooks> http://wiki.opscode.com/display/chef/Cookbooks </a></p>

<p>Cookbooks allow you to logically group recipes. Cookbooks come with all the stuff the recipes need to make themselves work, such as files, templates, and custom resources (LWRPs).</p>

<h2>
Roles
</h2>


<p><a href=http://wiki.opscode.com/display/chef/Roles> http://wiki.opscode.com/display/chef/Roles </a></p>

<p>Roles allow you to assemble trees of recipe names, which are expanded into run lists. Roles can contain other roles, which serve as vertices, and recipe names, which are the leaves. The tree is walked depth first, which makes ordering intuitive when assembling run lists. It is possible to apply many of these trees to a single node, but you don’t have to. Roles can also contain lists of attributes to apply to nodes, potentially changing recipe behavior.</p>

<h2>
Databags
</h2>


<p><a href=http://wiki.opscode.com/display/chef/Data+Bags > http://wiki.opscode.com/display/chef/Data+Bags </a></p>

<p>Databags are arbitrary JSON structures that can be searched for by Chef recipes. They typically contain things like database passwords and other information that needs to be shared between resources on nodes. You can think of them as read only global variables that live on chef-server. They also have a great name that can be used to make various jokes in Campfire.</p>

<h2>
Knife
</h2>


<p><a href=http://wiki.opscode.com/display/chef/Knife> http://wiki.opscode.com/display/chef/Knife </a></p>

<p>knife is the CLI interface to the chef-server API. It can manipulate databags, node objects, cookbooks, etc.  It can also be used to provision cloud resources and bootstrap systems.</p>

<p>-s</p>
]]></content>
  </entry>
  
</feed>
