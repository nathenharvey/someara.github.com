<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Chef | A Fistful of Servers]]></title>
  <link href="http://someara.github.com/blog/categories/chef/atom.xml" rel="self"/>
  <link href="http://someara.github.com/"/>
  <updated>2012-12-30T18:17:52-05:00</updated>
  <id>http://someara.github.com/</id>
  <author>
    <name><![CDATA[Sean OMeara]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CFEngine Puppet and Chef Part 3]]></title>
    <link href="http://someara.github.com/post/2011/12/30/cfengine-puppet-and-chef-part-3/"/>
    <updated>2011-12-30T20:11:00-05:00</updated>
    <id>http://someara.github.com/post/2011/12/30/cfengine-puppet-and-chef-part-3</id>
    <content type="html"><![CDATA[<p>At the end of the last installment, we used Puppet to create a Chef server. That brings us full circle, and the only thing we have left to do is examine how Chef works. We'll do that by looking at the code that gave us our original CFEngine server.</p>

<h2> Chef </h2>


<p><img class="right" src="http://farm4.staticflickr.com/3024/2417315604_ba73be6be2.jpg" width="300" height="300"></p>

<p>Since they're both written in Ruby, people tend to compare Puppet and Chef. This is natural since they have a lot in common. Both are convergence based configuration management tools inspired by CFEngine. Both have stand alone discovery agents (facter and ohai, respectively), as well as RESTful APIs for gleaning node information from the server. It turns out, however, that Chef actually has a lot more in common with CFEngine.</p>

<p>Like CFEngine, Chef copies policy from the server and evaluates it on the edges. This allows for high scalability, since the server isn't doing very much. Think of web application that does most of its work in the browser instead of on the server.</p>

<p>A Chef recipe is a collection of convergent <a href=http://wiki.opscode.com/display/chef/Resources target="_blank">resource</a> statements, and serves as the basic unit of intent. This is analogous to a CFEngine promise bundle. The Chef run list is how recipe ordering is defined, and is directly comparible to CFEngine's bundlesqeuence. Using this approach makes it easy to reason about what's going on when writing infrastructure as code.</p>

<h2> Chef Specials </h2>




<h3> Imperative programming and declarative interface </h3>


<p>While it's true that Chef is just "pure ruby" and therefore imperative, to say that Chef is imperative without considering the declarative interface to resources is disingenuous at best. Using nothing but Chef resources, recipes look very much like their CFEngine and Puppet counterparts. The non-optimally ordered Chef version of NTP converges in the same number of runs as the CFEngine example from the first installment. This is because the <a href=http://www.iu.hio.no/~mark/papers/immune.pdf target="_blank">underlying science</a> of convergent operators is the same.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;service&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">service</span> <span class="s2">&quot;ntp&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">action</span> <span class="o">[</span> <span class="ss">:enable</span><span class="p">,</span> <span class="ss">:start</span> <span class="o">]</span>
</span><span class='line'>  <span class="n">ignore_failure</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;file&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">template</span> <span class="s2">&quot;/etc/ntp.conf&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;ntp.conf.erb&quot;</span>
</span><span class='line'>  <span class="n">owner</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'>  <span class="n">group</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'>  <span class="n">mode</span> <span class="mo">0644</span>
</span><span class='line'>  <span class="n">notifies</span> <span class="ss">:restart</span><span class="p">,</span> <span class="s2">&quot;service[ntp]&quot;</span>
</span><span class='line'>  <span class="n">ignore_failure</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;package&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">package</span> <span class="s2">&quot;ntp&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">action</span> <span class="ss">:install</span>
</span><span class='line'>  <span class="n">ignore_failure</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><a href=http://bit.ly/vPixyI target="_blank">When and where order matters</a>, imperative ordering isolated within a recipe is the most intuitive way for sysadmins to accomplish tasks within the convergent model. "Install a package, edit a config file, and start the service" is how most people think about the task. Imperative ordering of declarative statements give the best of both worlds. When order does NOT matter, it's safe to re-arrange recipe ordering in the Chef run list.</p>

<h3> Multiphase execution </h3>


<p>The real trick to effective Chef cookbook development is to understand the <a href=http://wiki.opscode.com/display/chef/Anatomy+of+a+Chef+Run target="_blank">Anatomy of a Chef Run</a>. When a Chef recipe is evaluated in the compilation phase, encountered resources are added to the Resource Collection, which is an array of evaluated resources with deferred execution.</p>

<p>The compile phase of this recipe would add 99 uniquely named, 12 oz, convergent beer_bottles to the collection, and the configure phase would take them down and pass them around. Subsequent runs would do nothing.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>thanks jtimberman! </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">size</span> <span class="o">=</span> <span class="p">((</span><span class="mi">2</span> <span class="o">*</span> <span class="mi">3</span><span class="p">)</span> <span class="o">*</span> <span class="mi">4</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;99.downto(1) do |i|</span>
</span><span class='line'><span class="sr">  beer_bottle &quot;bottle-</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="sr">&quot; do&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">oz</span> <span class="n">size</span>
</span><span class='line'><span class="n">action</span> <span class="o">[</span> <span class="ss">:take_down</span><span class="p">,</span> <span class="ss">:pass_around</span> <span class="o">]</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The idea is that you can take advantage of the full power of Ruby to make decisions about what to declare about your resources. Most people just use the built in Chef APIs to consult chef-server for topology information about their infrastructure. However, there's nothing stopping you from importing random Ruby modules and accessing existing SQL databases instead.</p>

<p>Want to name name servers after your Facebook friends? <a href=http://rfacebook.rubyforge.org/ type="_blank">Go for it.</a> Want your MOTD to list all James Brown albums released between 1980 and 1990? <a href=https://github.com/buntine/discogs type="_blank">Not a problem</a>. The important part is that things are ultimately managed with a declarative, idempotent, and convergent resource interface.</p>

<h2> cfengine.rb </h2>


<p>Let's take a look at the recipe that gave us our original CFEngine server.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (server.rb)</span> <a href='/affs-blog/cookbooks/cfengine/recipes/server.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#######################################################</span>
</span><span class='line'><span class="c1">##</span>
</span><span class='line'><span class="c1">## Installs me some cfengine</span>
</span><span class='line'><span class="c1">##</span>
</span><span class='line'><span class="c1">#########################################################</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># variables</span>
</span><span class='line'><span class="n">cfdir</span> <span class="o">=</span> <span class="s2">&quot;/var/cfengine&quot;</span>
</span><span class='line'><span class="n">node</span><span class="o">.</span><span class="n">set</span><span class="o">[</span><span class="ss">:cfengine</span><span class="o">][</span><span class="ss">:server</span><span class="o">]=</span><span class="kp">true</span>
</span><span class='line'><span class="n">cfengine_clients</span> <span class="o">=</span> <span class="n">search</span><span class="p">(</span><span class="ss">:node</span><span class="p">,</span> <span class="s1">&#39;cfengine_client:true&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#######################################################</span>
</span><span class='line'><span class="c1"># packages</span>
</span><span class='line'><span class="c1">#######################################################</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># cfengine</span>
</span><span class='line'><span class="n">package</span> <span class="s2">&quot;cfengine&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#######################################################</span>
</span><span class='line'><span class="c1"># files, templates, and directories</span>
</span><span class='line'><span class="c1">#######################################################</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># masterfiles</span>
</span><span class='line'><span class="n">directory</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">cfdir</span><span class="si">}</span><span class="s2">/masterfiles&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">action</span> <span class="ss">:create</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># cfengine input files</span>
</span><span class='line'><span class="sx">%w{ inputs masterfiles }</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">dir</span><span class="o">|</span>
</span><span class='line'>  <span class="sx">%w{ failsafe cfengine_stdlib global garbage_collection cfengine }</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>    <span class="n">template</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">cfdir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">c</span><span class="si">}</span><span class="s2">.cf&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">source</span> <span class="s2">&quot;inputs/</span><span class="si">#{</span><span class="n">c</span><span class="si">}</span><span class="s2">.cf.erb&quot;</span>
</span><span class='line'>      <span class="n">variables</span><span class="p">(</span> <span class="ss">:cfengine_server</span> <span class="o">=&gt;</span> <span class="n">node</span> <span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># updates</span>
</span><span class='line'>  <span class="n">template</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">cfdir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">dir</span><span class="si">}</span><span class="s2">/update.cf&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">source</span> <span class="s2">&quot;inputs/update.cf.erb&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># promises.cf</span>
</span><span class='line'><span class="n">template</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">cfdir</span><span class="si">}</span><span class="s2">/inputs/promises.cf&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;inputs/promises-server.cf.erb&quot;</span>
</span><span class='line'>  <span class="n">variables</span><span class="p">(</span> <span class="ss">:cfengine_clients</span> <span class="o">=&gt;</span> <span class="n">cfengine_clients</span> <span class="p">)</span>
</span><span class='line'>  <span class="n">notifies</span> <span class="ss">:restart</span><span class="p">,</span> <span class="s2">&quot;service[cf-serverd]&quot;</span>
</span><span class='line'>  <span class="n">notifies</span> <span class="ss">:restart</span><span class="p">,</span> <span class="s2">&quot;service[cf-execd]&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">#######################################################</span>
</span><span class='line'><span class="c1"># Distribution only</span>
</span><span class='line'><span class="c1">#######################################################</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># promises.cf</span>
</span><span class='line'><span class="n">template</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">cfdir</span><span class="si">}</span><span class="s2">/masterfiles/promises.cf&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;inputs/promises-client.cf.erb&quot;</span>
</span><span class='line'>  <span class="n">variables</span><span class="p">(</span> <span class="ss">:cfengine_clients</span> <span class="o">=&gt;</span> <span class="n">cfengine_clients</span> <span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># puppet.cf</span>
</span><span class='line'><span class="n">template</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">cfdir</span><span class="si">}</span><span class="s2">/masterfiles/puppet.cf&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;inputs/puppet.cf.erb&quot;</span>
</span><span class='line'>  <span class="n">variables</span><span class="p">(</span> <span class="ss">:cfengine_clients</span> <span class="o">=&gt;</span> <span class="n">cfengine_clients</span> <span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">## puppet server policy distribution</span>
</span><span class='line'><span class="n">directory</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">cfdir</span><span class="si">}</span><span class="s2">/masterfiles/puppet&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">action</span> <span class="ss">:create</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># puppet/site.pp</span>
</span><span class='line'><span class="n">remote_directory</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">cfdir</span><span class="si">}</span><span class="s2">/masterfiles/puppet&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;server/puppet&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">#######################################################</span>
</span><span class='line'><span class="c1"># services</span>
</span><span class='line'><span class="c1">#######################################################</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># poke a hole in the firewall</span>
</span><span class='line'><span class="c1"># FIXME Do this properly once COOK-688 is done</span>
</span><span class='line'><span class="n">service</span> <span class="s2">&quot;iptables&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">action</span> <span class="o">[</span><span class="ss">:disable</span><span class="p">,</span><span class="ss">:stop</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">cfengine_services</span> <span class="o">=</span> <span class="sx">%w{</span>
</span><span class='line'><span class="sx">  cf-execd</span>
</span><span class='line'><span class="sx">  cf-serverd</span>
</span><span class='line'><span class="sx">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># services</span>
</span><span class='line'><span class="n">cfengine_services</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
</span><span class='line'>  <span class="n">service</span> <span class="n">s</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">action</span> <span class="o">[</span><span class="ss">:enable</span><span class="p">,</span><span class="ss">:start</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2> Topology management </h2>


<p>When a node is bootstrapped with Chef, a run list of roles or recipes is requested by the node itself. After that, the host is found by recipes running elsewhere in the infrastructure by <a href=http://bit.ly/vI5Z9l target="_blank">searching</a> for roles or attributes. This is contrasted from the CFEngine and Puppet techniques of matching classes based on a hostname, FQDN, IP, or other found information.</p>

<p>This approach has the effect of decoupling a node's name from its functionality. Line 10 in <code>cfengine.rb</code> above searches out node objects and later be passes them to the <code>promises-server.cf.erb</code> template for authorization.</p>

<h2> Wrapping up </h2>


<p>So there you have it folks. Chef making CFEngine making Puppet making Chef. These tools can be used to automate literally anything, and they're pretty easy to use once you figure out how they work. I was going to throw some Bcfg2 and LCFG in there just for fun, but I only had some much free time =)</p>

<p>Configuration mangement is like a portal.</p>

<p>-s</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CFEngine Puppet and Chef Part 2]]></title>
    <link href="http://someara.github.com/post/2011/12/30/cfengine-puppet-and-chef-part-2/"/>
    <updated>2011-12-30T20:10:00-05:00</updated>
    <id>http://someara.github.com/post/2011/12/30/cfengine-puppet-and-chef-part-2</id>
    <content type="html"><![CDATA[<p>In the previous installment, we used Chef to configure CFEngine to serve policy that allowed us to create a Puppet service. In this one, we'll have Chef use that Puppet service to create a Chef server. If you think this is a ridiculous thing to do, I would be inclined to agree with you. However, this is my blog so I make the rules.</p>

<h2> Puppet </h2>


<p>Puppet at its core works like CFEngine. Statements in Puppet are convergent operators, in that they are declarative (and therefore idempotent), and convergent in that they check a resource's state before taking any action. Like the NTP example from the CFEngine installment, non-optimally ordered execution will usually work itself out after repeated Puppet runs.</p>

<p>Unlike CFEngine, where policy is copied and evaluated on the edges, Puppet clients connect to the Puppet server where configuration is determined based on a certificate CN. A catalog of serialized configuration data is shipped back to the client for execution. This catalog is computed based on the contents of the manifests stored on the server, as well as a collection of <a href=http://puppetlabs.com/puppet/related-projects/facter target="_blank">facts</a> collected from the clients. Puppet facts, like CFEngine hard classes, are discoverable things about a node such as OS version, hostname, kernel version, network information, etc.</p>

<p><img class="left" src="http://images3.wikia.nocookie.net/__cb20050917222913/memoryalpha/en/images/d/d6/Coffee_replicates_then_mug.jpg" width="300" height="300"></p>

<p>Puppet works a bit like the food replicators in Star Trek. <a href=http://docs.puppetlabs.com/references/stable/type.html target="_blank">Resources</a> make up the basic atoms of a system, and the precise configuration of each must be defined. If a resource is defined twice in a manifest with conflicting states, Puppet refuses to run.</p>

<p>Ordering can be specified though <code>require</code> statements that set up relations between resources. These are used to build a <a href=http://en.wikipedia.org/wiki/Directed_graph target="_blank">directed graph</a>, which Puppet sorts <a href=http://en.wikipedia.org/wiki/Topological_sorting>topologically</a> and uses to determine the final ordering. If a resource in a chain fails for some reason, dependent resources down the graph will be skipped.</p>

<p>This allows for isolation of non-related resources collections. For example, if a package repository for some reason fails to deliver the 'httpd' package, its dependent configuration file and service resources will be skipped. This has nothing to do with an SSH resource collection, so the resources concerning that service will be executed even though the httpd collection had previously failed.</p>

<p>Just be careful not to create the coffee without the cup.</p>

<h2> chef.pp </h2>


<p>Let's examine a Puppet manifest that creates a Chef server on Centos 6.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (chef.pp)</span> <a href='/affs-blog/cookbooks/cfengine/files/default/server/puppet/manifests/classes/chef.pp'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="n">chef</span><span class="o">-</span><span class="n">server</span> <span class="p">{</span>
</span><span class='line'><span class="c1"># install FrameOS package repo</span>
</span><span class='line'>  <span class="nb">exec</span> <span class="p">{</span> <span class="s1">&#39;rbel6-release&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">command</span>  <span class="o">=&gt;</span> <span class="s2">&quot;/bin/rpm -Uvh http://rbel.co/rbel6&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">unless</span> <span class="o">=&gt;</span> <span class="s2">&quot;/bin/rpm -qa | grep rbel6-release&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># list of packages to install</span>
</span><span class='line'>  <span class="vg">$packages</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>    <span class="s2">&quot;couchdb&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;rabbitmq-server&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;rubygem-chef&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;rubygem-chef-server&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;rubygem-chef-solr&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;rubygem-chef-expander&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;rubygem-chef-server-api&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;rubygem-chef-server-webui&quot;</span>
</span><span class='line'>  <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># install all the packages</span>
</span><span class='line'>  <span class="n">package</span> <span class="p">{</span> <span class="vg">$packages</span><span class="p">:</span>
</span><span class='line'>    <span class="k">ensure</span> <span class="o">=&gt;</span> <span class="n">installed</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">Exec</span><span class="o">[</span> <span class="s1">&#39;rbel6-release&#39;</span> <span class="o">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># start couch</span>
</span><span class='line'>  <span class="n">service</span> <span class="p">{</span> <span class="s1">&#39;couchdb&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">ensure</span> <span class="o">=&gt;</span> <span class="n">running</span><span class="p">,</span>
</span><span class='line'>    <span class="n">enable</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>    <span class="n">hasstatus</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">Package</span><span class="o">[</span> <span class="vg">$packages</span> <span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># start rabbitmq</span>
</span><span class='line'>  <span class="n">service</span> <span class="p">{</span> <span class="s1">&#39;rabbitmq-server&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">ensure</span> <span class="o">=&gt;</span> <span class="n">running</span><span class="p">,</span>
</span><span class='line'>    <span class="n">enable</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>    <span class="n">hasstatus</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>    <span class="n">status</span> <span class="o">=&gt;</span> <span class="s2">&quot;service rabbitmq-server status | grep -e &#39;Pid .* running&#39;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">Package</span><span class="o">[</span> <span class="vg">$packages</span> <span class="o">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># #FIXME - poke proper hole</span>
</span><span class='line'><span class="c1"># turn off iptables </span>
</span><span class='line'>  <span class="n">service</span> <span class="p">{</span> <span class="s1">&#39;iptables&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">ensure</span> <span class="o">=&gt;</span> <span class="n">stopped</span><span class="p">,</span>
</span><span class='line'>    <span class="n">enable</span> <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span>
</span><span class='line'>    <span class="n">status</span> <span class="o">=&gt;</span> <span class="s2">&quot;/sbin/service iptables status | grep &#39;Table: filter&#39;&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># rabbitmq vhost</span>
</span><span class='line'>  <span class="nb">exec</span> <span class="p">{</span> <span class="s2">&quot;add vhost chef to rabbitmq&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">command</span> <span class="o">=&gt;</span> <span class="s2">&quot;/usr/sbin/rabbitmqctl add_vhost /chef&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">unless</span> <span class="o">=&gt;</span> <span class="s2">&quot;/usr/sbin/rabbitmqctl list_vhosts | grep ^/chef&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">Service</span><span class="o">[</span><span class="s1">&#39;rabbitmq-server&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># rabbitmq user</span>
</span><span class='line'>  <span class="nb">exec</span> <span class="p">{</span> <span class="s2">&quot;add user chef to rabbitmq&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">command</span> <span class="o">=&gt;</span> <span class="s2">&quot;/usr/sbin/rabbitmqctl add_user chef testing&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">unless</span> <span class="o">=&gt;</span> <span class="s2">&quot;/usr/sbin/rabbitmqctl list_users | grep chef&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">require</span> <span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>      <span class="no">Service</span><span class="o">[</span><span class="s1">&#39;rabbitmq-server&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="no">Exec</span><span class="o">[</span><span class="s1">&#39;add vhost chef to rabbitmq&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># rabbitmq permissions</span>
</span><span class='line'>  <span class="nb">exec</span> <span class="p">{</span> <span class="s2">&quot;add chef permissions to rabbitmq&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">command</span> <span class="o">=&gt;</span> <span class="s2">&quot;/usr/sbin/rabbitmqctl set_permissions -p /chef chef </span><span class="se">\&quot;</span><span class="s2">.*</span><span class="se">\&quot;</span><span class="s2"> </span><span class="se">\&quot;</span><span class="s2">.*</span><span class="se">\&quot;</span><span class="s2"> </span><span class="se">\&quot;</span><span class="s2">.*</span><span class="se">\&quot;</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">unless</span> <span class="o">=&gt;</span> <span class="s2">&quot;/usr/sbin/rabbitmqctl list_permissions -p /chef | grep ^chef&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">require</span> <span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>      <span class="no">Service</span><span class="o">[</span><span class="s1">&#39;rabbitmq-server&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="no">Exec</span><span class="o">[</span><span class="s1">&#39;add vhost chef to rabbitmq&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="no">Exec</span><span class="o">[</span><span class="s1">&#39;add user chef to rabbitmq&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># log directory</span>
</span><span class='line'>  <span class="n">file</span> <span class="p">{</span> <span class="s1">&#39;/var/log/chef&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">ensure</span> <span class="o">=&gt;</span> <span class="n">directory</span><span class="p">,</span>
</span><span class='line'>    <span class="n">owner</span> <span class="o">=&gt;</span> <span class="s2">&quot;root&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">mode</span> <span class="o">=&gt;</span> <span class="s2">&quot;755&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">Package</span><span class="o">[</span> <span class="vg">$packages</span> <span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># log files</span>
</span><span class='line'>  <span class="vg">$cheflogfiles</span> <span class="o">=</span> <span class="o">[</span> <span class="s1">&#39;/var/log/chef/solr.log&#39;</span><span class="p">,</span> <span class="s1">&#39;/var/log/chef/server.log&#39;</span><span class="p">,</span> <span class="s1">&#39;/var/log/chef/server-webui.log&#39;</span> <span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">file</span> <span class="p">{</span> <span class="vg">$cheflogfiles</span><span class="p">:</span>
</span><span class='line'>    <span class="k">ensure</span> <span class="o">=&gt;</span> <span class="n">present</span><span class="p">,</span>
</span><span class='line'>    <span class="n">owner</span> <span class="o">=&gt;</span> <span class="s2">&quot;root&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">mode</span> <span class="o">=&gt;</span> <span class="s2">&quot;644&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">require</span> <span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>      <span class="no">File</span><span class="o">[</span> <span class="s1">&#39;/var/log/chef&#39;</span> <span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="no">Package</span><span class="o">[</span> <span class="vg">$packages</span> <span class="o">]</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># begin running services</span>
</span><span class='line'>  <span class="n">service</span> <span class="p">{</span> <span class="s1">&#39;chef-server&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">ensure</span> <span class="o">=&gt;</span> <span class="n">running</span><span class="p">,</span>
</span><span class='line'>    <span class="n">enable</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">require</span> <span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>      <span class="no">Package</span><span class="o">[</span> <span class="vg">$packages</span> <span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="no">Exec</span><span class="o">[</span> <span class="s1">&#39;add vhost chef to rabbitmq&#39;</span> <span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="no">Exec</span><span class="o">[</span> <span class="s1">&#39;add user chef to rabbitmq&#39;</span> <span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="no">Exec</span><span class="o">[</span> <span class="s1">&#39;add chef permissions to rabbitmq&#39;</span> <span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="no">File</span><span class="o">[</span> <span class="vg">$cheflogfiles</span> <span class="o">]</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">service</span> <span class="p">{</span> <span class="s1">&#39;chef-solr&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">ensure</span> <span class="o">=&gt;</span> <span class="n">running</span><span class="p">,</span>
</span><span class='line'>    <span class="n">enable</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>    <span class="n">hasstatus</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">require</span> <span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>      <span class="no">Service</span><span class="o">[</span><span class="s1">&#39;chef-server&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">service</span> <span class="p">{</span> <span class="s1">&#39;chef-expander&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">ensure</span> <span class="o">=&gt;</span> <span class="n">running</span><span class="p">,</span>
</span><span class='line'>    <span class="n">enable</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>    <span class="n">hasstatus</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">require</span> <span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>      <span class="no">Service</span><span class="o">[</span><span class="s1">&#39;chef-solr&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">service</span> <span class="p">{</span> <span class="s1">&#39;chef-server-webui&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">ensure</span> <span class="o">=&gt;</span> <span class="n">running</span><span class="p">,</span>
</span><span class='line'>    <span class="n">enable</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">require</span> <span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>      <span class="no">Service</span><span class="o">[</span><span class="s1">&#39;chef-server&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="no">Service</span><span class="o">[</span> <span class="s1">&#39;iptables&#39;</span> <span class="o">]</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2> Picking it apart </h2>


<p>Line 1 is a Puppet class definition. This groups the resource statments between together, allowing us to assign <code>chef-server</code> to a node based on its hostname. This can be accomplished with an explicit nodes.pp definition, or with an external node classifier.</p>

<p>Line 3 is an <code>exec</code> resource, which we can later refer to with its name: <code>rbel6-release</code>. When using <code>exec</code> resources, it's up to you to specify a convergence check. In this case, we used the <code>unless</code> keyword to check the return status of an rpm command. The same goes for <code>command</code> promise types in CFEngine, or an <code>execute</code> resources in Chef.</p>

<p>Line 9 is an example of an array variable, which is iterated over in line 21, much like a CFEngine slist.</p>

<p>Everything else is a standard Puppet resource declaration, each of which have a type, a name, and an argument list. Like CFEngine promises, each type has various intentions available under the hood. Packages can be installed. Services can be running or stopped, and files can be present with certain contents and permissions.</p>

<p>Refer to the Puppet <a href=http://docs.puppetlabs.com/ target="_blank">documentation</a> for more details.</p>

<h2> On to Chef </h2>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>knife bootstrap centos6-3 -r <span class="s1">&#39;role[affs-chef]&#39;</span> -N <span class="s2">&quot;affs-chef-1.example.com&quot;</span> -E development -d affs-omnibus-pre -x root
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CFEngine Puppet and Chef Part 1]]></title>
    <link href="http://someara.github.com/post/2011/12/30/cfengine-puppet-and-chef-part-1/"/>
    <updated>2011-12-30T20:09:00-05:00</updated>
    <id>http://someara.github.com/post/2011/12/30/cfengine-puppet-and-chef-part-1</id>
    <content type="html"><![CDATA[<h2> Introduction </h2>


<p>Over the past few years, the topic of Infrastructure Automation has received a huge amount of attention. The three most commonly used tools for doing this (in order of appearance) are CFEngine, Puppet, and Chef. This article explores each of them by using one to set up another. If you have a chef-server or Hosted Chef account, you can follow along by following the instructions in the setup section. (Full disclosure: I work for Opscode, creators of Chef.)</p>

<h2> Infrastructure </h2>


<p><a href=http://www.infrastructures.org target="_blank">“Infrastructure”</a> turns out to be the hardest thing to explain when discussing automation, yet is the most critical to understand. In this context, Infrastructure isn’t anything physical (or virtualized) like servers or networks. Instead, what we’re talking about is all the “stuff” that is configured across machines to enable an application or service.</p>

<p>In practice, “stuff” translates to operating system baselines, kernel settings, disk mounts, OS user accounts, directories, symlinks, software installations, configuration files, running processes, etc. People of the ITIL persuasion may think of these as Configuration Items. Units of management are composed into larger constructs, and complexity arises as these arrangements become more intricate.</p>

<p>Services running in an Infrastructure need to communicate with each other, and do so via networks. Even when running on a single node, things still communicate over a loopback address or a Unix domain socket. This means that Infrastructure has a topology, which is in itself yet another thing to manage.</p>

<h2> Automation </h2>


<p><img class="left" src="http://upload.wikimedia.org/wikipedia/commons/7/75/Duck_of_Vaucanson.jpg"></p>

<p>Here is a picture of a duck.</p>

<p>This duck happens to be an <a href=http://en.wikipedia.org/wiki/Automaton target="_blank">automaton</a>. An automaton is a self-operating machine. This one pretends to digest grain. It interacts with its environment by taking input and producing output. To continue operating, the duck requires maintenance. It needs to be wound, cleaned, and repaired. Automated services running on a computer are no different.</p>

<p>Once turned on, an automated service takes input, does something useful, then leaves logs and other data in its wake. Its machinery is the arrangement of software installation, configuration, and the running state of a process. Maintenance is performed in a <a href=http://en.wikipedia.org/wiki/Autonomic_Computing target="_blank">control loop</a>, where an agent comes around at regular intervals inspecting its parts and fixing anything that’s broken.</p>

<p>In automated configuration management, the name of the game is hosting policy. The agents that build and maintain systems pull down blueprints and set to work building our automatons. When systems come back up from maintenance or new ones spring into existence, they configure themselves by downloading policy from the server.</p>

<h2> Setup </h2>


<p>If you'd like to follow along by configuring your own machines with knife, follow the setup instructions <a href=/cfchefipuppetengine-setup target="_blank">here</a>. The setup will get your Chef workstation configured, code checked out from my blog git repo, and uploaded to chef-server for use. Otherwise, you can just browse the source <a href=https://github.com/someara/affs-blog target="_blank">here</a></p>

<h2> CFEngine </h2>


<p><img class="right" src="http://farm1.staticflickr.com/120/293693669_59574a7640_m.jpg" title="A picture of what a cloud may look like" ></p>

<p>CFEngine is a system based on <a href=http://research.iu.hio.no/papers/rosegarden.pdf target="_blank">promise</a> <a href=http://project.iu.hio.no/papers/origin2.pdf target="_blank">theory</a>. Promises are the basic atoms of the CFEngine universe. They have names, types, and intentions (among other things), and each acts as a convergent operator to move its subject toward an intended state. Like the parts in our duck, promises are assembled to create a larger whole.</p>

<p>Promises of various types are capable of different things. Promises of type "package" can interact with a package manager to make sure somthing is installed or removed, while a promise of type "file", can copy, edit, and set permissions. Processes can be started or stopped, and commands can be ran if needed. Read all about them in the CFEngine <a href=http://cfengine.com/manuals/cf3-reference.html target="_blank">reference manual</a>.</p>

<p>Promises provide a <a href=http://c2.com/cgi/wiki?DeclarativeDefinition target="_blank">declarative</a> interface to resources under management, which has the remarkably handy attribute of being <a href=http://en.wikipedia.org/wiki/Idempotence target="_blank">idempotent</a>. An idempotent function gives the same result when applied multiple times. This allows our duck repairing maintence loop (in the form of cf-agent on a cron) to come around and safely execute instructions without having to worry about side effects. Consider "the line 'foo' should exist in the file" vs "append 'foo' to the end of the file"; the non-declarative 'append' would not be safe to repeat.</p>

<p><a href=http://en.wikipedia.org/wiki/Convergence_(mathematics) target="_blank">Convergent</a> maintenance refers to the continuous repair of a system towards a desired state. At the individual promise level, convergence happens in a single run of the maintenance loop. If a package is supposed to be installed but isn't, action will be taken to fix it. If a process is not running but should be, action will be taken again. Convergence in a larger system of promises can take multiple runs if things are processed in a non-optimal order. Consider the following:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Start the NTP service.
</span><span class='line'>Make sure the NTP configuration file is correct, restart the NTP service if repaired.
</span><span class='line'>Install the NTP package.</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Assuming a system with a base install, the first promise would fail to be kept. The NTP binary is not available, since we haven't installed its package yet. The second promise would write the configuration file, but fail to restart the service. The third promise would succeed, assuming an appropriate package repo was available and functioning properly. After the first run is complete, the system has converged closer to where we want it to be, but isn't quite there yet. Applying the functions again gets us closer to our goal.</p>

<p>The second run of the loop would succeed in starting the service, but would be using the wrong configuration file. The package install from the previous loop clobbered the one written previously. Promise number two would fix the config and restart the service, and the third would do nothing because the package is already installed. Finally, we've converged to our desired system state. A third loop would take no actions at all.</p>

<h2> Kicking things off </h2>


<p>To set up a CFEngine server, invoke the following Chef command:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>knife bootstrap centos6-1 -r <span class="s1">&#39;role[cfengine]&#39;</span> -N <span class="s2">&quot;cfengine-1.example.com&quot;</span> -E development -d affs-omnibus-pre -x root
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>When Chef is done doing its thing, you'll end up with a functioning CFEngine policy host, happily promising to serve policy. Log into the freshly configured machine and check it out. Three things have happened. First, the cfengine package itself has been installed. Second, two directories have been created and populated: <code>/var/cfengine/inputs</code>, and <code>/var/cfengine/masterfiles</code>.</p>

<p>The <code>inputs</code> directory contains configuration for the CFEngine itself, which includes a promise to make the contents of <code>masterfiles</code> available for distribution. When a CFEngine client comes up, it will copy the contents of <code>/var/cfengine/masterfiles</code> from the server into its own <code>inputs</code> directory.</p>

<h2> Examining policy </h2>


<p>CFEngine's main configuration file is <code>promises.cf</code>, from which everything else flows.  Here's a short snippet:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>promises.cf snippet  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">body</span> <span class="n">common</span> <span class="n">control</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">bundlesequence</span>  <span class="o">=&gt;</span> <span class="p">{</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;&quot;update&quot;,</span>
</span><span class='line'><span class="sr">&quot;garbage_collection&quot;,</span>
</span><span class='line'><span class="sr">&quot;cfengine&quot;,</span>
</span><span class='line'><span class="sr">&quot;puppet_server&quot;,</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  };&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">inputs</span>  <span class="o">=&gt;</span> <span class="p">{</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;&quot;update.cf&quot;,</span>
</span><span class='line'><span class="sr">&quot;cfengine_stdlib.cf&quot;,</span>
</span><span class='line'><span class="sr">&quot;cfengine.cf&quot;,</span>
</span><span class='line'><span class="sr">&quot;garbage_collection.cf&quot;,</span>
</span><span class='line'><span class="sr">&quot;puppet.cf&quot;,</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  };</span>
</span><span class='line'><span class="sr">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The bundlesequence section tells cf-agent what promise bundles to execute, and in what order. The one we're examining today is named puppet_server, found in <code>puppet.cf</code></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (puppet.cf.erb)</span> <a href='/affs-blog/cookbooks/cfengine/templates/default/inputs/puppet.cf.erb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">########################################################</span>
</span><span class='line'><span class="c1">##</span>
</span><span class='line'><span class="c1">## Installs me some puppet</span>
</span><span class='line'><span class="c1">##</span>
</span><span class='line'><span class="c1">#########################################################</span>
</span><span class='line'>
</span><span class='line'><span class="n">bundle</span> <span class="n">agent</span> <span class="n">puppet_server</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="n">vars</span><span class="p">:</span>
</span><span class='line'>  <span class="s2">&quot;foo&quot;</span> <span class="n">slist</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="s2">&quot;Hi.&quot;</span> <span class="p">};</span>
</span><span class='line'>  <span class="s2">&quot;bar&quot;</span> <span class="n">slist</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="s2">&quot;I&#39;m like a Chef attribute.&quot;</span> <span class="p">};</span>
</span><span class='line'>  <span class="s2">&quot;redhat_packages&quot;</span> <span class="n">slist</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="s2">&quot;puppet-server&quot;</span><span class="p">,</span> <span class="s2">&quot;puppet&quot;</span><span class="p">,</span> <span class="s2">&quot;facter&quot;</span> <span class="p">};</span>
</span><span class='line'>  <span class="s2">&quot;debian_packages&quot;</span> <span class="n">slist</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="s2">&quot;puppetmaster&quot;</span><span class="p">,</span> <span class="s2">&quot;puppet&quot;</span><span class="p">,</span> <span class="s2">&quot;vim-puppet&quot;</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">classes</span><span class="p">:</span>
</span><span class='line'>  <span class="s2">&quot;puppetmaster_enabled&quot;</span> <span class="n">expression</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="n">returnszero</span><span class="p">(</span><span class="s2">&quot;/sbin/chkconfig puppetmaster&quot;</span><span class="p">,</span> <span class="s2">&quot;noshell&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="s2">&quot;iptables_enabled&quot;</span> <span class="n">expression</span> <span class="o">=&gt;</span>
</span><span class='line'>      <span class="n">returnszero</span><span class="p">(</span><span class="s2">&quot;/sbin/service iptables status&quot;</span><span class="p">,</span> <span class="s2">&quot;noshell&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">files</span><span class="p">:</span>
</span><span class='line'>  <span class="s2">&quot;/etc/puppet&quot;</span>
</span><span class='line'>    <span class="n">comment</span> <span class="o">=&gt;</span> <span class="s2">&quot;default configuration file for puppet&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">copy_from</span> <span class="o">=&gt;</span> <span class="n">local_cp</span><span class="p">(</span><span class="s2">&quot;/var/cfengine/masterfiles/puppet&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="n">depth_search</span> <span class="o">=&gt;</span> <span class="n">recurse</span><span class="p">(</span><span class="s2">&quot;inf&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="n">perms</span> <span class="o">=&gt;</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;644&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="n">classes</span> <span class="o">=&gt;</span> <span class="n">if_repaired</span><span class="p">(</span><span class="s2">&quot;restart_puppetmaster&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">packages</span><span class="p">:</span>
</span><span class='line'>  <span class="n">redhat</span><span class="o">|</span><span class="no">CentOS</span><span class="o">::</span>
</span><span class='line'>  <span class="s2">&quot;$(redhat_packages)&quot;</span>
</span><span class='line'>    <span class="n">comment</span> <span class="o">=&gt;</span> <span class="s2">&quot;install redhat based distro packages&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">package_policy</span> <span class="o">=&gt;</span> <span class="s2">&quot;add&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">package_method</span> <span class="o">=&gt;</span> <span class="n">yum</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">debian</span><span class="o">|</span><span class="n">ubuntu</span><span class="o">::</span>
</span><span class='line'>  <span class="s2">&quot;$(debian_packages)&quot;</span>
</span><span class='line'>    <span class="n">comment</span> <span class="o">=&gt;</span> <span class="s2">&quot;install debian based distro packages&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">package_policy</span> <span class="o">=&gt;</span> <span class="s2">&quot;add&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">package_method</span> <span class="o">=&gt;</span> <span class="n">apt</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">processes</span><span class="p">:</span>
</span><span class='line'>  <span class="s2">&quot;/usr/bin/ruby /usr/sbin/puppetmasterd&quot;</span>
</span><span class='line'>    <span class="n">comment</span> <span class="o">=&gt;</span> <span class="s2">&quot;the puppetmaster service&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">restart_class</span> <span class="o">=&gt;</span> <span class="n">canonify</span><span class="p">(</span><span class="s2">&quot;restart_puppetmaster&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">commands</span><span class="p">:</span>
</span><span class='line'>  <span class="s2">&quot;/bin/echo&quot;</span>
</span><span class='line'>    <span class="n">args</span> <span class="o">=&gt;</span> <span class="s2">&quot;$(foo) $(bar)&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">ifvarclass</span> <span class="o">=&gt;</span> <span class="n">canonify</span><span class="p">(</span><span class="s2">&quot;restart_puppetmaster&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="s2">&quot;/sbin/service puppetmaster restart&quot;</span>
</span><span class='line'>    <span class="n">ifvarclass</span> <span class="o">=&gt;</span> <span class="n">canonify</span><span class="p">(</span><span class="s2">&quot;restart_puppetmaster&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="s2">&quot;/sbin/chkconfig puppetmaster on&quot;</span>
</span><span class='line'>    <span class="n">ifvarclass</span> <span class="o">=&gt;</span> <span class="s2">&quot;!puppetmaster_enabled&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s2">&quot;/sbin/service iptables stop&quot;</span>
</span><span class='line'>    <span class="n">ifvarclass</span> <span class="o">=&gt;</span> <span class="s2">&quot;iptables_enabled&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s2">&quot;/sbin/chkconfig iptables off&quot;</span>
</span><span class='line'>    <span class="n">ifvarclass</span> <span class="o">=&gt;</span> <span class="s2">&quot;iptables_enabled&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">########################################################</span>
</span><span class='line'>
</span><span class='line'><span class="n">body</span> <span class="n">perms</span> <span class="nb">system</span><span class="p">(</span><span class="nb">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">mode</span> <span class="o">=&gt;</span> <span class="s2">&quot;$(p)&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>A promise bundle is CFEngine's basic unit of intent. It's a place to logically group related promises. Within a bundle, CFEngine processes things with <a href=http://cfengine.com/manuals/cf3-reference.html#Normal-ordering target="_blank">normal ordering</a>. That is, variables are converged first, then classes, then files, then packages, and so on. I wrote the bundle sections in normal order to make it easier to read, but they could be rearranged and still have the same effect. Without going into too much detail about the language, I'll give a couple hints to help with groking the example.</p>

<p>First, in CFEngine, the word 'class' does not mean what it normally does in other programming languages. Instead, classes are boolean flags that describe context. Classes can be 'hard classes', which are discovered attributes about the environment (hostname, operating system, time, etc), or 'soft classes', which are defined by the programmer. In the above example, puppetmaster_enabled and iptables_enabled are soft classes set based on the return status of a command. In the place of <code>if</code> or <code>case</code> statements, boolean checks on classes are used.</p>

<p>Second, there are no control statements like <code>for</code> or <code>while</code>. Instead, when lists are encountered they are automatically iterated. Check out the packages section for examples of both class decisions and list iteration. Given those two things, you should be able to work your way through the example. However, there's really no getting around reading the reference manual if you want to learn CFEngine.</p>

<h2> On to Puppet </h2>


<p>Finally, let's go ahead and use Chef to bring up a CFEngine client, which will be turned into a Puppet server.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>knife bootstrap centos6-2 -r <span class="s1">&#39;role[puppet]&#39;</span> -N <span class="s2">&quot;puppet-1.example.com&quot;</span> -E development -d affs-omnibus-pre -x root
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The first run will fail, since the host's IP isn't yet in the cfengine server's allowed hosts lists. Complete the convergence by running these commands:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>knife ssh <span class="s2">&quot;role:cfengine&quot;</span> -a ipaddress chef-client
</span><span class='line'>knife ssh <span class="s2">&quot;role:puppet&quot;</span> -a ipaddress chef-client
</span><span class='line'>knife ssh <span class="s2">&quot;role:puppet&quot;</span> -a ipaddress chef-client
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And viola! A working Puppet server, serving policy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Brief Chef Tutorial (from concentrate)]]></title>
    <link href="http://someara.github.com/post/2011/03/16/a-brief-chef-tutorial-from-concentrate/"/>
    <updated>2011-03-16T15:18:00-04:00</updated>
    <id>http://someara.github.com/post/2011/03/16/a-brief-chef-tutorial-from-concentrate</id>
    <content type="html"><![CDATA[<h2> Overview </h2>


<p></p>

<p>Chef is configuration management platform written in Ruby. Configuration management is a large topic that most systems administrators and IT management are just now starting to gain experience with. Historically, infrastructures have been maintained either by hand, with structured scripting, by imagine cloning, or a combination of those. Chef’s usage model rejects the idea of cloning and maintaining “golden images”. Instead, the idea is to start with an embryonic image and grow it into it’s desired state. This works much better as infrastructure complexity increases, and eliminates the problem of image sprawl. The convergent nature of the tool allows you to change the infrastructure over time without much fuss. Chef allows you to express your infrastructure as code, which lets you store it in version control.</p>

<p>“A Can of Condensed Chef Documentation” is available <a href=/post/2011/03/15/a-can-of-condensed-chef-documentation/> here </a></p>

<h2> Prerequisites </h2>




<h3> Git </h3>


<p>Actually you can use any SCM, but git is the most widely adopted in the Chef community. All Chef Git repos begin their lives as clones of the Opscode chef-repo, found here: https://github.com/opscode/chef-repo There is a nice overview of the repo structure (cookbooks, databags, roles, etc) in the README.</p>

<h3> chef-server up and running at a known IP or FQDN. </h3>


<p>This is easily installed from packages by following the instructions on the opscode wiki. The process amounts to “add a package repository, install the packages, and turn it on” Alternatively, you could use the Opscode Platform and go dancing with space robots.</p>

<h3> Knife installed on your local system </h3>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>gem install chef net-ssh net-ssh-multi fog highline
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3> Chef git repo checked out on local file system </h3>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clone https://github.com/opscode/chef-repo
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3> Client certificate creation </h3>


<p>A “client” in chef parlance is an SSL certificate used to access the chef-server API. If the client’s CN name is marked “admin” in chef-server, the client can perform restricted operations such as creating and deleting nodes. This is the kind of client needed by knife to manipulate the infrastructure, and normally correspond to actual human being, but by no means has to. Nodes have non-admin client certificates, and can only manipulate their own node objects. To create a client certificate, you’ll need to log into the chef-server webui, click on “clients”, think of a name for it (I use someara), and paste the displayed private key into a local file.</p>

<p><strong> Copy the validation key </strong><br>
The validation key is a special key that is shared by all freshly bootstrapped nodes. It has the ability to create new client certificates and nodes objects through the API.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>scp root@chefserver:/etc/chef/validation.pem .chef/
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3> Edit configuration files </h3>


<p>For more details on this section, please visit http://wiki.opscode.com/display/chef/Chef+Configuration+Settings</p>

<p>.chef/client.rb - This file is copied onto the nodes that are bootstrapped with knife, and needs to be configured to point to the IP or FQDN of your chef server</p>

<p>example
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>$ vim client.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">log_level</span>          <span class="ss">:info</span>
</span><span class='line'><span class="n">log_location</span>       <span class="no">STDOUT</span>
</span><span class='line'><span class="n">ssl_verify_mode</span>    <span class="ss">:verify_none</span>
</span><span class='line'><span class="n">chef_server_url</span>    <span class="s2">&quot;http://y.t.b.d:4000&quot;</span>
</span><span class='line'><span class="n">file_cache_path</span>    <span class="s2">&quot;/var/cache/chef&quot;</span>
</span><span class='line'><span class="n">pid_file</span>           <span class="s2">&quot;/var/run/chef/client.pid&quot;</span>
</span><span class='line'><span class="n">cache_options</span><span class="p">({</span> <span class="ss">:path</span> <span class="o">=&gt;</span> <span class="s2">&quot;/var/cache/chef/checksums&quot;</span><span class="p">,</span> <span class="ss">:skip_expires</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">})</span>
</span><span class='line'><span class="n">signing_ca_user</span> <span class="s2">&quot;chef&quot;</span>
</span><span class='line'><span class="no">Mixlib</span><span class="o">::</span><span class="no">Log</span><span class="o">::</span><span class="no">Formatter</span><span class="o">.</span><span class="n">show_time</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="n">validation_client_name</span> <span class="s2">&quot;chef-validator&quot;</span>
</span><span class='line'><span class="n">validation_key</span>         <span class="s2">&quot;/etc/chef/validation.pem&quot;</span>
</span><span class='line'><span class="n">client_key</span>             <span class="s2">&quot;/etc/chef/client.pem&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>.chef/knife.rb - This file also needs to be configured to point to your chef-server, and also to the client private key that was created earlier.</p>

<p>example
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>$ vim knife.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">log_level</span>            <span class="ss">:info</span>
</span><span class='line'><span class="n">log_location</span>         <span class="no">STDOUT</span>
</span><span class='line'><span class="n">node_name</span>           <span class="s1">&#39;knife&#39;</span>
</span><span class='line'><span class="n">cache_type</span>          <span class="s1">&#39;BasicFile&#39;</span>
</span><span class='line'><span class="n">cache_options</span><span class="p">(</span> <span class="ss">:path</span> <span class="o">=&gt;</span> <span class="s2">&quot;~/.chef/checksums&quot;</span> <span class="p">)</span>
</span><span class='line'><span class="n">client_key</span>       <span class="s1">&#39;~/.chef/knife.key.pem&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;cookbook_path       [ &quot;~/m</span><span class="n">ychefrepo</span><span class="o">/</span><span class="n">cookbooks</span><span class="s2">&quot; ]</span>
</span><span class='line'><span class="s2">cookbook_copyright &quot;</span><span class="n">example</span> <span class="n">org</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">cookbook_email     &quot;</span><span class="n">cookbooks</span><span class="vi">@example</span><span class="o">.</span><span class="n">net</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">cookbook_license   &quot;</span><span class="n">apachev2</span><span class="s2">&quot;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;chef_server_url    &quot;</span><span class="n">http</span><span class="ss">:/</span><span class="o">/</span><span class="n">y</span><span class="o">.</span><span class="n">t</span><span class="o">.</span><span class="n">b</span><span class="o">.</span><span class="n">d</span><span class="p">:</span><span class="mi">4000</span><span class="s2">&quot;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;validation_key      &quot;</span><span class="o">~</span><span class="sr">/.chef/</span><span class="n">validation</span><span class="o">.</span><span class="n">pem</span><span class="s2">&quot;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;h1&gt;rackspacecloud&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;knife[:rackspace_api_key] = &#39;00000000000000000000000000000000&#39;</span>
</span><span class='line'><span class="s2">knife[:rackspace_username] = &#39;rackspace&#39;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;h1&gt;slicehost&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;knife[:slicehost_password] = &#39;0000000000000000000000000000000000000000000000000000000000000000&#39;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;h1&gt;AFFS aws&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;knife[:aws_access_key_id]     = &#39;00000000000000000000&#39;</span>
</span><span class='line'><span class="s2">knife[:aws_secret_access_key] = &#39;0000000000000000000000000000000000000000&#39;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;h1&gt;knife[:region]  = &quot;</span><span class="n">us</span><span class="o">-</span><span class="n">east</span><span class="o">-</span><span class="mi">1</span><span class="s2">&quot;&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;h1&gt;knife[:availability_zone] = &quot;</span><span class="n">us</span><span class="o">-</span><span class="n">west</span><span class="o">-</span><span class="mi">1</span><span class="n">b</span><span class="s2">&quot;&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;h1&gt;knife[:ssh_user] = &quot;</span><span class="n">root</span><span class="s2">&quot;&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;h1&gt;knife[:flavor] = &quot;</span><span class="n">t1</span><span class="o">.</span><span class="n">micro</span><span class="s2">&quot;&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;h1&gt;knife[:image] = &quot;</span><span class="n">ami</span><span class="o">-</span><span class="mi">10</span><span class="n">a55279</span><span class="s2">&quot;&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;h1&gt;knife[:use_sudo]  = &quot;</span><span class="kp">false</span><span class="s2">&quot;&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;h1&gt;knife[:distro] = &quot;</span><span class="n">affs</span><span class="o">-</span><span class="n">fc13</span><span class="s2">&quot;&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2> Role, recipes, and run lists</h2>


<p>As mentioned earlier, run lists are made up from role trees. Here is an example of how you would create a demo server with a correct clock, managed users, and metrics and monitoring capabilities. In this example, six recipes are executed per run, and an unknown number of resources are managed. (To figure that out, you’d have to read the recipes)</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>role[demo]
</span><span class='line'>  role[base]                   &lt;---- nested role
</span><span class='line'>  recipe[foo::server]
</span><span class='line'>  recipe[foo::muninplugin]&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>role[base]
</span><span class='line'>  recipe[ntp]
</span><span class='line'>  recipe[localusers::common]
</span><span class='line'>  recipe[munin::client]
</span><span class='line'>  recipe[nagios::client]&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>expanded run list
</span><span class='line'>  recipe[ntp]&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>recipe[localusers::common]
</span><span class='line'>recipe[munin::client]
</span><span class='line'>recipe[nagios::client]
</span><span class='line'>recipe[foo::server]
</span><span class='line'>recipe[foo::muninplugin]
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>That’s quite a bit of cooking for a beginner tutorial, so we’re just going to focus on a single node running an NTP client for now. Roles can be written either as .rb files or .json files. I prefer to use the .rb format because they’re easier to read and write. Some people prefer to deal with the JSON formatted version directly, since thats the way they’re dumped with knife. At the end of the day, it doesn’t really matter, so do which ever makes you happy.</p>

<h3> Step One : Creating a demo role file </h3>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>$ vim roles/demo.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">name</span> <span class="s2">&quot;demo&quot;</span>
</span><span class='line'><span class="n">description</span> <span class="s2">&quot;demo role&quot;</span>
</span><span class='line'><span class="n">run_list</span> <span class="o">[&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;&quot;recipe[ntp]&quot;</span>
</span><span class='line'><span class="sr">]</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3> Step Two : Installing the role on chef-server </h3>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>knife role from file roles/demo.rb
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2> Writing Recipes </h2>


<h3> Hello, NTP! </h3>


<p>A machine’s NTP client is simple to install and configure. Every systems administrator is already familiar with it, which makes it a great example.</p>

<p>Most software available as a native package in a given linux distribution can be managed with a “package, template, service” design pattern.</p>

<p>Each of those words refers to a Chef resource, which we pass arguments to.</p>

<h3> Step One : Creating an ntp cookbook </h3>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>knife cookbook create ntp
</span></code></pre></td></tr></table></div></figure></notextile></div>
This creates a directory structure for the ntp cookbook. You can check it out with ls:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ls -la cookbooks/ntp/
</span><span class='line'>total 24
</span><span class='line'>drwxr-xr-x  13 someara  staff   442 Mar 14 17:56 .
</span><span class='line'>drwxr-xr-x  36 someara  staff  1224 Mar 15 19:39 ..
</span><span class='line'>-rw-r--r--   1 someara  staff    58 Mar 14 17:56 README.rdoc
</span><span class='line'>drwxr-xr-x   2 someara  staff    68 Mar 14 17:56 attributes
</span><span class='line'>drwxr-xr-x   2 someara  staff    68 Mar 14 17:56 definitions
</span><span class='line'>drwxr-xr-x   3 someara  staff   102 Mar 14 17:56 files
</span><span class='line'>drwxr-xr-x   2 someara  staff    68 Mar 14 17:56 libraries
</span><span class='line'>-rw-r--r--   1 someara  staff   259 Mar 14 17:56 metadata.rb
</span><span class='line'>drwxr-xr-x   2 someara  staff    68 Mar 14 17:56 providers
</span><span class='line'>drwxr-xr-x   4 someara  staff   136 Mar 14 17:56 recipes
</span><span class='line'>drwxr-xr-x   2 someara  staff    68 Mar 14 17:56 resources
</span><span class='line'>drwxr-xr-x   3 someara  staff   102 Mar 14 17:56 templates
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3> Step Two : Deciding what to name the recipe </h3>


<p>Recipe names are related to cookbook structure. Putting recipe[foo::bar] in a node’s run list results in cookbooks/foo/recipes/bar.rb being downloaded from chef-server and executed.</p>

<p>There is a special recipe in every cookbook called default.rb. It is executed by every recipe in the cookbook. Specifying recipe[foo::bar] actually results in cookbooks/foo/recipes/default.rb, as well as cookbooks/foo/recipes/bar.rb being executed.</p>

<p>Default.rb is a good place to put common stuff when writing cookbooks with multiple recipes, but we’re going to keep it simple and just use default.rb for everything.</p>

<h3> Step Three : Creating a recipe </h3>


<p>This is where all the fun stuff happens. When using resources, you’re writing things in a declarative fashion. Declarative means you can concentrate on the WHAT without having to worry about the HOW. Chef will take care of that for you with something called a resource provider. When installing a package, it will check to see what your operating system is and use the appropriate methodology. For example, on Debian based systems, it will use apt-get, and on Redhat based systems, it will use yum.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>$ vim cookbooks/ntp/recipes/default.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">package</span> <span class="s2">&quot;ntp&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">action</span> <span class="o">[</span><span class="ss">:install</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;template &quot;/e</span><span class="n">tc</span><span class="o">/</span><span class="n">ntp</span><span class="o">.</span><span class="n">conf</span><span class="s2">&quot; do</span>
</span><span class='line'><span class="s2">  source &quot;</span><span class="n">ntp</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">erb</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">  variables( :ntp_server =&gt; &quot;</span><span class="n">time</span><span class="o">.</span><span class="n">nist</span><span class="o">.</span><span class="n">gov</span><span class="s2">&quot; )</span>
</span><span class='line'><span class="s2">end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;service &quot;</span><span class="n">ntpd</span><span class="s2">&quot; do</span>
</span><span class='line'><span class="s2">  action[:enable,:start]</span>
</span><span class='line'><span class="s2">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Chef recipes are evaluated top down (like a normal ruby program), with each resource being ran in the order it appears. Order is important. In the above example, if we were to reverse the order of those three resources, it would first fail to start the service (as the software is not installed yet), then write the configuration file, then finally clobber the file it just wrote by installing the package.</p>

<h3> Step Four : Creating the ntp.conf.erb template </h3>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>$ vim cookbooks/ntp/templates/default/ntp.conf.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;h1&gt;generated by Chef.&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;restrict default kod nomodify notrap nopeer noquery</span>
</span><span class='line'><span class="x">restrict -6 default kod nomodify notrap nopeer noquery</span>
</span><span class='line'><span class="x">restrict 127.0.0.1</span>
</span><span class='line'><span class="x">restrict -6 ::1</span>
</span><span class='line'><span class="x">server &amp;lt;%= @ntp_server </span><span class="err">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">server  127.127.1.0     # local clock</span>
</span><span class='line'><span class="x">driftfile /var/lib/ntp/drift</span>
</span><span class='line'><span class="x">keys /etc/ntp/keys</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3> Step Five : uploading the cookbook to chef-server </h3>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>knife cookbook upload ntp
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2> Bootstraping nodes </h2>


<p>The chef-client needs to somehow get itself installed and running on managed nodes. This process is known as bootstrapping and is accomplished with shell scripting. The method of bootstrap will vary depending on how you go about provisioning your server, and the script will depend on the platform.</p>

<h3> Clouds </h3>


<p>Cloud providers like AWS and Rackspace will let you make an API request, then return the IP of your compute resource.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>knife ec2 server create <span class="s2">&quot;role[demo]&quot;</span> -N <span class="s2">&quot;demo.example.net&quot;</span> -i ami-3e02f257
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In this example, knife uses the ruby fog library to talk to ec2 and request a server with an argument of the desired AMI. Knife then uses net-ssh-multi to ssh into the machine and execute a bootstrapping script. There are a number of other arguments that can be passed to knife, such as ec2 region, machine size, what ssh key to use. You can read all about them on the Opscode wiki.</p>

<h3> Meatclouds </h3>


<p>If your method of provisioning servers is “ask your VMware administrator” or “fill out these forms”, then you’ll probably bootstrap via an IP address.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>knife boostrap 10.0.0.5 -x root -N demo.example.net -r <span class="s1">&#39;role[demo]&#39;</span> -d pp-centos5
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3> Cobbler / FAI / pxe_dust / Jumpstart / etc </h3>


<p>In these provisioning scenarios, you can skip knife completely and put the contents of a bootstrap script kickstart or equivalent.</p>

<h2> Customizing the bootstrap </h2>


<p>By default (with no arguments), Chef attempts a gem based installation meant to work on Ubuntu. If you’re not using Ubuntu, or are uncomfortable installing gems directly from rubygems.org, you’ll have to change the script to suite your taste. It works by specifying a template name with the -d flag, SSH’ing into the machine and running the rendered script. When using knife to SSH, make sure you have the correct key loaded into your ssh-agent.</p>

<h3> Example </h3>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>knife boostrap 10.0.0.5 -x root -N demo.example.net -r ‘role<span class="o">[</span>demo<span class="o">]</span>’ -d my-centos5
</span></code></pre></td></tr></table></div></figure></notextile></div>
ends up running this</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ssh root@10.0.0.179 bash -c ‘&lt;contents of rendered .chef/bootstrap/my-centos5.erb template&gt;’
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>What I do in my boot scripts:</p>

<ul>
<li>Correctly set the hostname to value of -N argument. (By correctly, I mean that <code>hostname -f</code> has to work properly)</li>
<li>Configure the package repositories</li>
<li>Install Chef. I like packages using the native package manager</li>
<li>Copy the validation key</li>
<li>Write /etc/chef/client.rb (points to server)</li>
<li>Write a json file with the contents of the -r argument</li>
<li>chef-client -j bootstrap.json</li>
</ul>


<p>After the script is ran, chef-client does the following</p>

<ul>
<li>Ohai!</li>
<li>Client registration: SSL CN is FQDN from ohai</li>
<li>Node creation: Node name is also FQDN from ohai, run lists are from JSON</li>
<li>Expands run list</li>
<li>Downloads needed cookbooks</li>
<li>Starts executing recipes</li>
</ul>


<p>There is an example of a custom bootstrap script <a href=https://github.com/someara/affs-blog/blob/v1/.chef/bootstrap/affs-fc13.erb> here </a></p>

<p>At this point, you should have an ntp client installed, configured, and running.</p>

<p>(It’s actually a little bit more complicated than that. For more information about chef-client runs, see <a href=http://wiki.opscode.com/display/chef/Anatomy+of+a+Chef+Run> http://wiki.opscode.com/display/chef/Anatomy+of+a+Chef+Run </a>)</p>

<h2> Databag Driven Recipes </h2>


<p>Data driven infrastructures are all the rage these days. This allows you to do things like change the NTP server all your nodes use by editing a single JSON value in chef-server. You can get really creative with this, so let your imagination run wild.</p>

<h3> Step One : Create an ntp data bag </h3>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>knife data bag create ntp
</span><span class='line'><span class="nv">$ </span>mkdir -p data_bags/ntp
</span><span class='line'><span class="nv">$ </span>vim data_bags/ntp/default_server.json
</span><span class='line'><span class="o">{</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;<span class="s2">&quot;id&quot;</span> : <span class="s2">&quot;default_server&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;value&quot;</span> : <span class="s2">&quot;us.pool.ntp.org&quot;</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3> Step Two : Upload data bag to chef-server </h3>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>knife data bag from file ntp data_bags/ntp/default_server.json
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3> Step Three : Modify the recipe to take advantage of it </h3>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ntp/recipes/default.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">package</span> <span class="s2">&quot;ntp&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">action</span> <span class="o">[</span><span class="ss">:install</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;ntp_server = data_bag_item(&#39;ntp&#39;, &#39;default_server&#39;)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">template</span> <span class="s2">&quot;/etc/ntp.conf&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;ntp.conf.erb&quot;</span>
</span><span class='line'>  <span class="n">variables</span><span class="p">(</span> <span class="ss">:ntp_server</span> <span class="o">=&gt;</span> <span class="n">ntp_server</span><span class="o">[</span><span class="s1">&#39;value&#39;</span><span class="o">]</span> <span class="p">)</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;service &quot;ntpd&quot; do</span>
</span><span class='line'><span class="sr">  action[:enable,:start]</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You can also access data bag data through the search() interface, which you can read about on the opscode wiki.</p>

<h3>Step Four : uploading the cookbook to chef-server</h3>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>knife cookbook upload ntp
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2> Understanding Idempotence and Convergence </h2>


<p>We’re not quite done yet. Let’s SSH into our shiny new NTP enabled machine and go poking about.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>grep server /etc/ntp.conf | head -n 1
</span><span class='line'>server time.nist.gov
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Wait a sec, isn’t that supposed to be “us.pool.ntp.org”? Not yet. We haven’t enabled our convergence mechanism yet! If we manually run chef-client on the node, we will indeed see that the file has changed.</p>

<h3> Convergence </h3>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;chef-client&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>grep server /etc/ntp.conf | head -n 1
</span><span class='line'>us.pool.ntp.org
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>That file just converged into the correct state. Lets edit the file again, this time filling it with complete garbage.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;dd <span class="k">if</span><span class="o">=</span>/dev/urandom <span class="nv">of</span><span class="o">=</span>/etc/ntp.conf <span class="nv">bs</span><span class="o">=</span>128 <span class="nv">count</span><span class="o">=</span>1&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;chef-client&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>grep server /etc/ntp.conf | head -n 1
</span><span class='line'>us.pool.ntp.org
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Again, the file converged into the correct state. Awesome. Running chef-client by hand on a large cluster of nodes would be a real pain, so it makes sense to set it up automatically. Indeed, often found in a “role[base]” is a “recipe[chef-client]” that configures it to run as a daemon, or from a cron.</p>

<h3> Idempotence </h3>


<p>It is safe to run the recipes on the nodes time and time again because resources are written to be idempotent. You may remember from math class that a function f is idempotent if, for all values of x, f(f(x))=f(x). That means you can run a function over a resource a bajillion times and it will behave as if it was only done once.</p>

<p>This is implemented under the hood as “If it ain’t broke, don’t fix it.” In a file resource, checksums are calculated and compared. In a package resource, the rpm or dpkg databases are consulted to see if the package is installed. The effect of this is that most chef-client runs do absolutely nothing to resources. That is, until you change the function by altering the inputs to the resource providers.</p>

<h2> Notifications and Subscriptions </h2>


<p>Further examination reveals that the ntpd service is still talking to “time.nist.gov”. This is because during the chef-client run, the resource named “ntpd” ran it’s idempotency check, and found that it was, in fact, running. It therefore did nothing. It we want ntpd to restart when the contents /etc/ntp.conf are altered, we have to modify our recipe to set up that relation.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ntp/recipes/default.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">package</span> <span class="s2">&quot;ntp&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">action</span> <span class="o">[</span><span class="ss">:install</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;ntp_server = data_bag_item(&#39;ntp&#39;, &#39;default_server&#39;)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">template</span> <span class="s2">&quot;/etc/ntp.conf&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;ntp.conf.erb&quot;</span>
</span><span class='line'>  <span class="n">variables</span><span class="p">(</span> <span class="ss">:ntp_server</span> <span class="o">=&gt;</span> <span class="n">ntp_server</span><span class="o">[</span><span class="s1">&#39;value&#39;</span><span class="o">]</span> <span class="p">)</span>
</span><span class='line'>  <span class="n">notifies</span> <span class="ss">:restart</span><span class="p">,</span> <span class="s2">&quot;service[ntpd]&quot;</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;service &quot;ntpd&quot; do</span>
</span><span class='line'><span class="sr">  action[:enable,:start]</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Alternatively, we could have set up the “service[ntpd]” resource to subscribe to the “template[/etc/ntp.conf]” resource.</p>

<p>Upload the modified ntp cookbook to chef-server and re-run the client on your demo server to check your work.
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;chef-client&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>lsof -i | grep ntp | grep pool
</span><span class='line'>ntpd       5673    ntp   19u  IPv4 12481380      0t0  UDP us.pool.ntp.org:ntp<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Winning.</p>

<h2> Bulk Loading data into chef-server </h2>


<p>To save yourself from writing crazy for loops on command line like</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">for </span>i in &lt;code&gt;ls cookbooks&lt;/code&gt; ; <span class="k">do </span>knife cookbook upload <span class="nv">$i</span> ; <span class="k">done</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Or even worse,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">for </span>i in &lt;code&gt;ls data_bags&lt;/code&gt; ; <span class="k">do</span>
</span><span class='line'><span class="k">  for </span>j in &lt;code&gt;ls data_bags/<span class="nv">$i</span>/&lt;/code&gt;; <span class="k">do</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;knife data bag create <span class="nv">$i</span>
</span><span class='line'>knife data bag from file <span class="nv">$i</span> data_bags/<span class="nv">$i</span>/<span class="nv">$j</span> ;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  <span class="k">done</span> ;
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>... somebody was nice enough to write some rake tasks. List them with rake -T, and then install your repo in chef-server with "rake install"</p>

<h2> Viewing your Infrastructure </h2>


<p>There are two ways to view your infrastructure. The first is through the management console, and the other is from knife. Here is a list of handy commands to get you started.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>knife node list
</span><span class='line'>knife node show foo.example.net
</span><span class='line'>knife data bag list
</span><span class='line'>knife data bag show whatever
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2> Deleting Clients, Nodes, and Machines </h2>


<p>Remember that nodes, their client certificates, and the machines they’re associated with are three separate entities.</p>

<h3> Nodes </h3>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>knife node delete foo.example.net
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This just deletes the node object from chef-server. The next time the machine runs chef-client, the node object will be recreated in chef-server. This node object will have an empty run list what will have to be repopulated before chef-client actually does anything.</p>

<h3> Clients </h3>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>knife client delete foo.example.net
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This deletes a node object’s associated public key from chef-server. The next time the machine runs chef-client, it will get a permission denied error. If this is done on accident, ssh into the machine, delete it’s client key at /etc/chef/client.pem and re-run chef-client.</p>

<h3> Machines </h3>


<p>Deleting a machine will be specific to how it was provisioned. On AWS, it would look like “knife ec2 server delete i-DEAFBEEF”. On a VMware cluster, it could be by clicking buttons in a GUI. I once deleted a hardware machine by throwing it off a balcony. YMMV.</p>

<h2> nodes.sh </h2>


<p>I like to keep a special directory called “infrastructures” that contain sub-directories and nodes.sh files. A nodes.sh contains a list of knife commands that can be thought of as the highest level view of the infrastructure. for example:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>knife bootstrap 10.0.0.10 -r <span class="s1">&#39;role[database]&#39;</span>  -N database-01.example.net -x root -d my-fedora13
</span><span class='line'>knife bootstrap 10.0.0.11 -r <span class="s1">&#39;role[database]&#39;</span> -N database-02.example.net -x root -d my-fedora13
</span><span class='line'>knife bootstrap 10.0.0.14 -r <span class="s1">&#39;role[redis]&#39;</span> -N redis01.example.net -x root -d my-fedora13
</span><span class='line'>knife bootstrap 10.0.0.15 -r <span class="s1">&#39;role[redis]&#39;</span> -N redis02.example.net -x root -d my-fedora13
</span><span class='line'>knife bootstrap 10.0.0.14 -r <span class="s1">&#39;role[files]&#39;</span> -N files01.example.net -x root -d my-fedora13
</span><span class='line'>knife bootstrap 10.0.0.15 -r <span class="s1">&#39;role[files]&#39;</span> -N files02.example.net -x root -d my-fedora13
</span><span class='line'>knife bootstrap 10.0.0.16 -r <span class="s1">&#39;role[appdemo]&#39;</span> -N appdemo01.example.net -x root -d my-fedora13
</span><span class='line'>knife bootstrap 10.0.0.17 -r <span class="s1">&#39;role[appdemo]&#39;</span> -N appdemo02.example.net -x root -d my-fedora13
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This file can eventually be used to bring up entire infrastructures, but during development, lines are typically pasted into a terminal individually.</p>

<p>This is as close as I’ve gotten to replacing myself with a very small shell script so far. Many a sysadmin has been pursuing this for a long time now. It is here. The journey has just begun.</p>

<p>-s</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Can of Condensed Chef Documentation]]></title>
    <link href="http://someara.github.com/post/2011/03/15/a-can-of-condensed-chef-documentation/"/>
    <updated>2011-03-15T14:34:00-04:00</updated>
    <id>http://someara.github.com/post/2011/03/15/a-can-of-condensed-chef-documentation</id>
    <content type="html"><![CDATA[<h2>
Overview
</h2>


<p>Chef’s documentation is vast and broken up into many pages on the Opscode wiki. The goal here is to index this information and give a brief explanation of each topic without going into too much depth.</p>

<h2>
Architecture
</h2>


<p><a href= http://wiki.opscode.com/display/chef/Architecture> http://wiki.opscode.com/display/chef/Architecture </a></p>

<p>Chef is a configuration management platform in the same class of tools as Cfengine, Bcfg2, and Puppet. The idea is to define policy at a centralized, version controlled place, and then have the machines under management pull down their policy and converge onto that state at regular intervals. This gives you a single point of administration allowing for easier change management and disaster recovery. Combined with a compute resource provisioning layer (such as knife’s ability to manipulate EC2 or Rackspace servers), entire complex infrastructures can pop into existence in minutes.</p>

<h2>
Chef Server
</h2>


<p><a href=http://wiki.opscode.com/display/chef/Chef+Server> http://wiki.opscode.com/display/chef/Chef+Server </a></p>

<p>Chef server has various components under the hood. Assorted information (cookbooks, databags, client certificates, and node objects), are stored in CouchDB as JSON blobs. CouchDB is indexed by chef-solr-indexer. RabbitMQ sits between the data store and A RESTful API service that exposes all this to the network as chef-server. If you don’t want to run chef-server yourself, Opscode will do it for you for with their Platform service for a meager $5/node/month. The management console is really handy during development, since it provides a nice way to examine JSON data. However, it should be noted that real chefs value knife techniques.</p>

<h2>
Clients
</h2>


<p><a href=http://wiki.opscode.com/display/chef/API+Clients> http://wiki.opscode.com/display/chef/Api+Clients </a></p>

<p>In Chef, the term “client” refers to an SSL certificate for an API user of chef-server. This is often a point of confusion, and should not be confused with chef-client. Most of the time, one machine has one client certificate, which corresponds to one node object.</p>

<h2>
Nodes
</h2>


<p><a href=http://wiki.opscode.com/display/chef/Nodes> http://wiki.opscode.com/display/chef/Nodes </a></p>

<p>Nodes are JSON representations of machines under Chef management. They live in chef-server. They contain two important things: The node’s run list, and a collection of attributes. The run list is a collection of recipes names that will be ran on the machine when chef-client is invoked. Attributes are various facts about the node, which can be manipulated either by hand, or from recipes.</p>

<h2>
Attributes
</h2>


<p><a href=http://wiki.opscode.com/display/chef/Attributes> http://wiki.opscode.com/display/chef/Attributes </a></p>

<p>Attributes are arbitrary values set in a node object. Ohai provides a lot of informational attributes about the node, and arbitrary attributes can be set by the line cooks. They can be set from recipes or roles, and have a precedence system that allow you to override them. Examples of arbitrary attributes are listen ports for network services, or the names of a package on a particular linux distribution (httpd vs apache2).</p>

<h2>
Ohai
</h2>


<p><a href=http://wiki.opscode.com/display/chef/Ohai> http://wiki.opscode.com/display/chef/Ohai </a></p>

<p>Ohai is the Chef equivilent of Cfengine’s cf-know and Puppet’s facter. When invoked, it collects a bunch of information about the machine its running on, including Chef related stuff, hostname, FQDN, networking, memory, cpu, platform, and kernel data. This information is then output as JSON and used to update the node object on chef-server. It is possible to write custom Ohai plugins, if your’re interested in something not dug up by default.</p>

<h2>
Chef Client
</h2>


<p><a href=http://wiki.opscode.com/display/chef/Chef+Client> http://wiki.opscode.com/display/chef/Chef+Client </a></p>

<p>Managed nodes run an agent called chef-client at regular intervals. This agent can be ran as a daemon or invoked from cron. The agent pulls down policy from chef-server and converges the system to the described state. This lets you introduce changes to machines in your infrastructure by manipulating data in chef-server. The pull (vs push) technique ensures machines that are down for maintenance end up the proper state when turned back on.</p>

<h2>
Resources
</h2>


<p><a href=http://wiki.opscode.com/display/chef/Resources > http://wiki.opscode.com/display/chef/Resources </a></p>

<p>Resources are the basic configuration items that are manipulated by Chef recipes. Resources make up the Chef DSL by providing a declarative interface to objects on the machine. Examples of core resources include files, directories, users and groups, links, packages, and services.</p>

<h2>
Recipes
</h2>


<p><a href=http://wiki.opscode.com/display/chef/Recipes > http://wiki.opscode.com/display/chef/Recipes </a></p>

<p>Recipes contain the actual code that gets ran on machines by chef-client. Recipes can be made up entirely of declarative resources statements, but rarely are. The real power of Chef stems from a recipes’s ability to search chef-server for information. Recipes can say “give me a list of all the hostnames of my web servers”, and then generate the configuration file for your load balancer. Another recipe might say “give me a list of all my database servers”, so it can configure Nagios to monitor them.</p>

<h2>
Cookbooks
</h2>


<p><a href=http://wiki.opscode.com/display/chef/Cookbooks> http://wiki.opscode.com/display/chef/Cookbooks </a></p>

<p>Cookbooks allow you to logically group recipes. Cookbooks come with all the stuff the recipes need to make themselves work, such as files, templates, and custom resources (LWRPs).</p>

<h2>
Roles
</h2>


<p><a href=http://wiki.opscode.com/display/chef/Roles> http://wiki.opscode.com/display/chef/Roles </a></p>

<p>Roles allow you to assemble trees of recipe names, which are expanded into run lists. Roles can contain other roles, which serve as vertices, and recipe names, which are the leaves. The tree is walked depth first, which makes ordering intuitive when assembling run lists. It is possible to apply many of these trees to a single node, but you don’t have to. Roles can also contain lists of attributes to apply to nodes, potentially changing recipe behavior.</p>

<h2>
Databags
</h2>


<p><a href=http://wiki.opscode.com/display/chef/Data+Bags > http://wiki.opscode.com/display/chef/Data+Bags </a></p>

<p>Databags are arbitrary JSON structures that can be searched for by Chef recipes. They typically contain things like database passwords and other information that needs to be shared between resources on nodes. You can think of them as read only global variables that live on chef-server. They also have a great name that can be used to make various jokes in Campfire.</p>

<h2>
Knife
</h2>


<p><a href=http://wiki.opscode.com/display/chef/Knife> http://wiki.opscode.com/display/chef/Knife </a></p>

<p>knife is the CLI interface to the chef-server API. It can manipulate databags, node objects, cookbooks, etc.  It can also be used to provision cloud resources and bootstrap systems.</p>

<p>-s</p>
]]></content>
  </entry>
  
</feed>
